@page "/email-templates"
@using RegistrationPortal.Data.Models
@using RegistrationPortal.Data.DataAccess
@using System.Text.RegularExpressions
@using System.Text

@inject IEmailTemplateData EmailTemplateData
@inject NavigationManager NavManager

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<div class="flex flex-col mx-auto max-w-7xl px-4 sm:px-4 lg:px-4 space-y-4">
    <div class="flex-initial w-full mx-auto">
        <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="bg-cyan-950 px-4 py-3 sm:px-6">
                <h1 class="text-base font-semibold leading-6 text-white">Email Template Management</h1>
                <p class="text-sm text-white">Create, edit, and manage email templates for form verification.</p>
            </div>

            @if (showTemplateList)
            {
                <div class="p-4">
                    <div class="flex justify-between mb-4">
                        <h2 class="text-lg font-semibold">All Templates</h2>
                        <button @onclick="() => CreateNewTemplate()" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700">
                            Create New Template
                        </button>
                    </div>

                    @if (templates == null)
                    {
                        <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-cyan-600"></div>
                    }
                    else if (!templates.Any())
                    {
                        <div class="text-gray-500">No templates found. Create a new one to get started.</div>
                    }
                    else
                    {
                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200">
                                <thead>
                                    <tr>
                                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Division</th>
                                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Created Date</th>
                                        <th class="px-6 py-3 bg-gray-50 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                    </tr>
                                </thead>
                                <tbody class="bg-white divide-y divide-gray-200">
                                    @foreach (var template in templates)
                                    {
                                        <tr>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@template.Name</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@template.Division</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@template.CreatedDate.ToString("yyyy-MM-dd")</td>
                                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                                <button @onclick="() => EditTemplate(template.Id)" class="text-cyan-600 hover:text-cyan-900 mr-3">Edit</button>
                                                <button @onclick="() => PreviewTemplate(template.Id)" class="text-cyan-600 hover:text-cyan-900 mr-3">Preview</button>
                                                <button @onclick="() => DeleteTemplateConfirmation(template.Id)" class="text-red-600 hover:text-red-900">Delete</button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="p-4">
                    <div class="flex justify-between mb-4">
                        <h2 class="text-lg font-semibold">@(isEditing ? "Edit Template" : "Create Template")</h2>
                        <button @onclick="BackToList" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-gray-500 hover:bg-gray-600">
                            Back to List
                        </button>
                    </div>

                    <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                        <div class="sm:col-span-3">
                            <label for="name" class="block text-sm font-medium text-gray-700">Template Name</label>
                            <div class="mt-1">
                                <input type="text" id="name" @bind="currentTemplate.Name" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                            </div>
                        </div>

                        <div class="sm:col-span-3">
                            <label for="division" class="block text-sm font-medium text-gray-700">Division</label>
                            <div class="mt-1">
                                <select id="division" @bind="currentTemplate.Division" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md">
                                    <option value="All">All Divisions</option>
                                    <option value="Memorization">Memorization</option>
                                    <option value="Ten Qira'at">Ten Qiraat</option>
                                    <option value="Best Voice">Best Voice</option>
                                    <option value="Islamic Studies">Islamic Studies</option>
                                </select>
                            </div>
                        </div>

                        <div class="sm:col-span-6">
                            <label for="subject" class="block text-sm font-medium text-gray-700">Subject</label>
                            <div class="mt-1">
                                <input type="text" id="subject" @bind="currentTemplate.Subject" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                            </div>
                        </div>

                        <div class="sm:col-span-6">
                            <label for="plainText" class="block text-sm font-medium text-gray-700">Plain Text Template</label>
                            <div class="mt-1">
                                <textarea id="plainText" @bind="currentTemplate.PlainTextTemplate" rows="6" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md"></textarea>
                            </div>
                            <p class="mt-2 text-sm text-gray-500">
                                Use {{VariableName}} for dynamic content. Available variables: {{CreatorDisplayName}}, {{CreatorUserType}}, {{Year}}, etc.
                            </p>
                        </div>

                        <div class="sm:col-span-6">
                            <label for="htmlTemplate" class="block text-sm font-medium text-gray-700">HTML Template</label>
                            <div class="mt-1">
                                <textarea id="htmlTemplate" @bind="currentTemplate.HtmlTemplate" rows="12" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md"></textarea>
                            </div>
                        </div>

                        <div class="sm:col-span-6">
                            <div class="flex justify-between mb-4">
                                <h3 class="text-md font-semibold">Conditional Blocks</h3>
                                <button @onclick="AddConditionalBlock" class="inline-flex justify-center py-1 px-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700">
                                    Add Condition
                                </button>
                            </div>

                            @foreach (var (block, index) in currentTemplate.ConditionalBlocks.Select((block, index) => (block, index)))
                            {
                                <div class="border rounded-md p-4 mb-4">
                                    <div class="flex justify-between mb-2">
                                        <h4 class="text-sm font-medium">Condition Block #@(index + 1)</h4>
                                        <button @onclick="() => RemoveConditionalBlock(index)" class="text-red-600 hover:text-red-900">Remove</button>
                                    </div>

                                    <div class="grid grid-cols-1 gap-y-4 gap-x-4 sm:grid-cols-6">
                                        <div class="sm:col-span-3">
                                            <label class="block text-sm font-medium text-gray-700">Name</label>
                                            <div class="mt-1">
                                                <input type="text" @bind="block.Name" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                            </div>
                                            <p class="mt-1 text-xs text-gray-500">
                                                Use this name in templates like: {{ConditionName}}
                                            </p>
                                        </div>

                                        <div class="sm:col-span-3">
                                            <label class="block text-sm font-medium text-gray-700">Description</label>
                                            <div class="mt-1">
                                                <input type="text" @bind="block.Description" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                            </div>
                                        </div>

                                        <div class="sm:col-span-3">
                                            <label class="block text-sm font-medium text-gray-700">Condition Type</label>
                                            <div class="mt-1">
                                                <select @bind="block.ConditionType" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md">
                                                    <option value="StateIs">State is in list</option>
                                                    <option value="StateNotIn">State is NOT in list</option>
                                                </select>
                                            </div>
                                        </div>

                                        <div class="sm:col-span-3">
                                            <label class="block text-sm font-medium text-gray-700">States (comma-separated)</label>
                                            <div class="mt-1">
                                                <input type="text" @bind="block.States" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md" />
                                            </div>
                                            <p class="mt-1 text-xs text-gray-500">
                                                Example: MN, TX, TN
                                            </p>
                                        </div>

                                        <div class="sm:col-span-6">
                                            <label class="block text-sm font-medium text-gray-700">Content when condition is TRUE</label>
                                            <div class="mt-1">
                                                <textarea @bind="block.TrueContent" rows="3" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md"></textarea>
                                            </div>
                                        </div>

                                        <div class="sm:col-span-6">
                                            <label class="block text-sm font-medium text-gray-700">Content when condition is FALSE</label>
                                            <div class="mt-1">
                                                <textarea @bind="block.FalseContent" rows="3" class="shadow-sm focus:ring-cyan-500 focus:border-cyan-500 block w-full sm:text-sm border-gray-300 rounded-md"></textarea>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="mt-5 flex justify-end">
                        <button @onclick="SaveTemplate" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700">
                            Save Template
                        </button>
                    </div>
                </div>
            }

            @if (showPreview)
            {
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg shadow-xl w-11/12 md:w-3/4 lg:w-2/3 xl:w-1/2 max-h-[90vh] overflow-auto">
                        <div class="bg-cyan-950 px-4 py-3 rounded-t-lg">
                            <h2 class="text-white font-semibold">Template Preview</h2>
                        </div>
                        <div class="p-4">
                            <h3 class="font-medium mb-2">Subject: @currentTemplate.Subject</h3>
                            <div class="border p-4 mb-4 rounded bg-gray-50">
                                <h4 class="font-medium mb-2">Plain Text Version:</h4>
                                <pre class="whitespace-pre-wrap">@currentTemplate.PlainTextTemplate</pre>
                            </div>
                            <div class="border p-4 rounded">
                                <h4 class="font-medium mb-2">HTML Version:</h4>
                                <div class="bg-white border p-4">
                                    @((MarkupString)currentTemplate.HtmlTemplate)
                                </div>
                            </div>

                            <div class="mt-4 flex justify-between">
                                <div>
                                    <h4 class="font-medium mb-2">Conditional Blocks:</h4>
                                    <ul class="list-disc list-inside">
                                        @foreach (var block in currentTemplate.ConditionalBlocks)
                                        {
                                            <li class="mb-2">
                                                <strong>@block.Name</strong>: @block.Description<br />
                                                <small>Condition: @block.ConditionType on states: @block.States</small>
                                            </li>
                                        }
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg">
                            <button @onclick="ClosePreview" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-500 text-base font-medium text-white hover:bg-gray-600 sm:ml-3 sm:w-auto sm:text-sm">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            }

            @if (showDeleteConfirmation)
            {
                <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
                    <div class="bg-white rounded-lg shadow-xl max-w-lg w-full">
                        <div class="p-4">
                            <h3 class="text-lg font-medium text-gray-900">Delete Template</h3>
                            <p class="mt-2">Are you sure you want to delete this template? This action cannot be undone.</p>
                        </div>
                        <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg">
                            <button @onclick="DeleteTemplate" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 sm:ml-3 sm:w-auto sm:text-sm">
                                Delete
                            </button>
                            <button @onclick="CancelDelete" class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                                Cancel
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<EmailTemplate> templates;
    private EmailTemplate currentTemplate = new EmailTemplate();
    private bool showTemplateList = true;
    private bool isEditing = false;
    private bool showPreview = false;
    private bool showDeleteConfirmation = false;
    private string templateIdToDelete;

    protected override async Task OnInitializedAsync()
    {
        await LoadTemplates();
    }

    private async Task LoadTemplates()
    {
        templates = await EmailTemplateData.GetEmailTemplates();
    }

    private void CreateNewTemplate()
    {
        currentTemplate = new EmailTemplate
            {
                Division = "All",
                ConditionalBlocks = new List<ConditionalBlock>()
            };
        isEditing = false;
        showTemplateList = false;
    }

    private async Task EditTemplate(string id)
    {
        currentTemplate = await EmailTemplateData.GetEmailTemplate(id);
        isEditing = true;
        showTemplateList = false;
    }

    private async Task PreviewTemplate(string id)
    {
        currentTemplate = await EmailTemplateData.GetEmailTemplate(id);
        showPreview = true;
    }

    private void ClosePreview()
    {
        showPreview = false;
    }

    private void DeleteTemplateConfirmation(string id)
    {
        templateIdToDelete = id;
        showDeleteConfirmation = true;
    }

    private async Task DeleteTemplate()
    {
        await EmailTemplateData.DeleteEmailTemplate(templateIdToDelete);
        showDeleteConfirmation = false;
        await LoadTemplates();
    }

    private void CancelDelete()
    {
        showDeleteConfirmation = false;
    }

    private void BackToList()
    {
        showTemplateList = true;
    }

    private async Task SaveTemplate()
    {
        currentTemplate.ModifiedDate = DateTime.UtcNow;

        if (isEditing)
        {
            await EmailTemplateData.UpdateEmailTemplate(currentTemplate);
        }
        else
        {
            currentTemplate.CreatedDate = DateTime.UtcNow;
            await EmailTemplateData.CreateEmailTemplate(currentTemplate);
        }

        await LoadTemplates();
        showTemplateList = true;
    }

    private void AddConditionalBlock()
    {
        currentTemplate.ConditionalBlocks.Add(new ConditionalBlock
            {
                Name = $"Condition{currentTemplate.ConditionalBlocks.Count + 1}",
                Description = "State-specific content",
                ConditionType = "StateIs",
                States = "",
                TrueContent = "",
                FalseContent = ""
            });
    }

    private void RemoveConditionalBlock(int index)
    {
        currentTemplate.ConditionalBlocks.RemoveAt(index);
    }
}