@page "/form-email"
@page "/form-email/{TEST}"
@using System.Globalization
@using System.Text
@using RegistrationPortal.Data.Models
@using RegistrationPortal.Data.DataAccess
@using RegistrationPortal.Services

@inject IFormData FormData
@inject IUserData UserData
@inject IEmailTemplateData EmailTemplateData
@inject IEmailTemplateProcessor TemplateProcessor
@inject AuthenticationStateProvider AuthState
@inject FetchSasUri FetchSasUri
@inject IEmailService EmailService
@inject NavigationManager NavManager

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]


<div class="flex flex-col md:flex-row mx-auto max-w-7xl px-4 sm:px-4 lg:px-4 space-y-4 md:space-y-0 md:space-x-2">
    <div class="flex-initial w-full md:w-3/4 mx-auto max-w-3xl">
        <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="bg-cyan-950 px-4 py-3 sm:px-6">
                <h1 class="text-base font-semibold leading-6 text-white">Form Email</h1>
                <p class="text-sm text-white">Confirm reviewed forms and send a customized email.</p>
            </div>

            @if (users != null && users.Any())
            {
                <div class="bg-cyan-800 px-2 py-2 sm:px-6">

                    <!-- Navigation Buttons -->
                    <div class="flex justify-between">
                        <button @onclick="GoToPreviousUser" class="inline-flex justify-center py-1 px-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-950" disabled="@isProcessing">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mx-2">
                                <path fill-rule="evenodd" d="M7.793 2.232a.75.75 0 0 1-.025 1.06L3.622 7.25h10.003a5.375 5.375 0 0 1 0 10.75H10.75a.75.75 0 0 1 0-1.5h2.875a3.875 3.875 0 0 0 0-7.75H3.622l4.146 3.957a.75.75 0 0 1-1.036 1.085l-5.5-5.25a.75.75 0 0 1 0-1.085l5.5-5.25a.75.75 0 0 1 1.06.025Z" clip-rule="evenodd" />
                            </svg>
                            Previous Form
                        </button>
                        <span class="py-1 px-2 text-sm font-medium text-white">@($"Form {currentUserIndex + 1} of {users.Count}")</span>
                        <button @onclick="GoToNextUser" class="inline-flex justify-center py-1 px-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-950" disabled="@isProcessing">
                            Next Form
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mx-2">
                                <path fill-rule="evenodd" d="M12.207 2.232a.75.75 0 0 0 .025 1.06l4.146 3.958H6.375a5.375 5.375 0 0 0 0 10.75H9.25a.75.75 0 0 0 0-1.5H6.375a3.875 3.875 0 0 1 0-7.75h10.003l-4.146 3.957a.75.75 0 0 0 1.036 1.085l5.5-5.25a.75.75 0 0 0 0-1.085l-5.5-5.25a.75.75 0 0 0-1.06.025Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>

                </div>
            }

            <div class="px-4 py-2 md:p-6">
                <!-- Division and Template Selection -->
                <div class="sm:flex sm:items-center justify-between">
                    <div class="">
                        <label class="block text-base text-gray-700">Display Option</label>
                        <div class="space-y-2 mt-2">
                            <InputRadioGroup Name="displayOptions" @bind-Value="selectedDisplayOption">
                                <div class="flex items-center">
                                    <InputRadio id="all" Value="DisplayOptions2.All" class="h-4 w-4 border-gray-300 text-cyan-600 focus:ring-cyan-600" @oninput="() => OnDisplayOptionChange(DisplayOptions2.All)" />
                                    <label for="all" class="ml-3 block text-sm font-medium leading-6 text-gray-900">Reviewed & Verified Forms <span class="text-gray-300">(Default)</span></label>
                                </div>
                                <div class="flex items-center">
                                    <InputRadio id="reviewed" Value="DisplayOptions2.Reviewed" class="h-4 w-4 border-gray-300 text-cyan-600 focus:ring-cyan-600" @oninput="() => OnDisplayOptionChange(DisplayOptions2.Reviewed)" />
                                    <label for="reviewed" class="ml-3 block text-sm font-medium leading-6 text-gray-900">Reviewed Only</label>
                                </div>
                            </InputRadioGroup>
                        </div>
                    </div>
                    <div class="w-full sm:max-w-xs">
                        <label for="division" class="block text-base text-gray-700">Division</label>
                        <select id="division" @bind="selectedDivision" @oninput="UpdateDivision" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-cyan-500 focus:border-cyan-500 sm:text-sm rounded-md">
                            <option>Select a Division</option>
                            <option value="Memorization">Memorization</option>
                            <option value="Ten Qira'at">Ten Qiraat</option>
                            <option value="Best Voice">Best Voice</option>
                            <option value="Islamic Studies">Islamic Studies</option>
                        </select>
                    </div>
                </div>

                <!-- Email Template Selection -->
                @if (!string.IsNullOrEmpty(selectedDivision))
                {
                    <div class="mt-4">
                        <label for="template" class="block text-base text-gray-700">Email Template</label>
                        <div class="flex mt-1">
                            <select id="template" @bind="selectedTemplateId" @oninput="OnTemplateSelectionChanged" class="block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-cyan-500 focus:border-cyan-500 sm:text-sm rounded-md">
                                <option value="">Select a Template</option>
                                @if (availableTemplates != null)
                                {
                                    @foreach (var template in availableTemplates)
                                    {
                                        <option value="@template.Id">@template.Name</option>
                                    }
                                }
                            </select>
                            <button @onclick="PreviewEmailTemplate" class="ml-2 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700" disabled="@(string.IsNullOrEmpty(selectedTemplateId) || users == null || !users.Any())">
                                Preview
                            </button>
                        </div>
                    </div>
                }

                @if (users != null && users.Any())
                {
                    <!-- User/ Associated Forms Display -->
                    <div class="mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">User Details</h3>

                        <dl class="mt-2 border-t border-b border-gray-200 divide-y divide-gray-200">
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-700">
                                    <span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-sm font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
                                        User Information
                                    </span>
                                </dt>
                                <dd class="text-gray-900">@ToTitleCase(currentUser.DisplayName) (@currentUser.UserType)</dd>
                            </div>
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-700">
                                    <span class="inline-flex items-center rounded-md bg-gray-50 px-2 py-1 text-sm font-medium text-gray-600 ring-1 ring-inset ring-gray-500/10">
                                        Number of Associated Forms (@selectedDivision)
                                    </span>
                                </dt>
                                <dd class="text-gray-900">@currentUserForms.Count()</dd>
                            </div>
                        </dl>

                        <span class="text-emerald-600">@successText</span>

                        @if (isProcessing)
                        {
                            <div class="mt-3 flex items-center">
                                <div class="animate-spin rounded-full h-5 w-5 border-b-2 border-emerald-600"></div>
                                <span class="ml-2 text-emerald-600">Processing... (@(currentProcessingIndex + 1) of @users.Count)</span>
                            </div>
                        }
                    </div>

                    <div class="mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Associated Form(s)</h3>

                        <dl class="mt-2 border-t border-b border-gray-200 divide-y divide-gray-200">
                            @foreach (var form in currentUserForms)
                            {
                                <div class="py-3 flex justify-between text-sm font-medium">
                                    <dt class="text-gray-500">Full Name</dt>
                                    <dd class="text-gray-900">@form.PersonalInfo.GetFirstMiddleLastName()</dd>
                                </div>
                                <div class="py-3 flex justify-between text-sm font-medium">
                                    <dt class="text-gray-500">Date of Birth</dt>
                                    <dd class="text-gray-900">@form.PersonalInfo.DOB</dd>
                                </div>
                                <div class="py-3 flex justify-between text-sm font-medium">
                                    <dt class="text-gray-500">Address</dt>
                                    <dd class="text-gray-900">@form.AddressInfo.StateProvince</dd>
                                </div>
                                <div class="py-3 flex justify-between text-sm font-medium">
                                    <dt class="text-gray-500">Competition Information</dt>
                                    <dd class="text-gray-900">@form.CompetitionInfo.Division | @form.CompetitionInfo.Category | @form.CompetitionInfo.Portion</dd>
                                </div>
                                <div class="py-3 flex justify-between text-sm font-medium">
                                    <dt class="text-gray-500">Status</dt>
                                    <dd class="text-gray-900">
                                        <span class="inline-flex items-center rounded-md px-2 py-1 font-medium text-800-700 ring-1 ring-inset ring-gray-600/20 @GetStatusSpanCssClass(form.StatusInfo.Status)">@form.StatusInfo.Status</span>
                                    </dd>
                                </div>
                            }
                        </dl>
                    </div>
                }
                else
                {
                    <!-- Form Details Display -->
                    @if (!string.IsNullOrEmpty(messageText))
                    {
                        <div class="py-3">
                            <p class="text-base font-semibold text-gray-600">@messageText</p>
                        </div>
                    }
                }
            </div>

            <div class="bg-cyan-800 px-2 py-2 sm:px-6 flex justify-center items-center space-x-4">
                @if (users != null && users.Any())
                {
                    <button @onclick="VerifiedStatus" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500" disabled="@(isProcessing || string.IsNullOrEmpty(selectedTemplateId))">
                        Verify Current
                    </button>
                    <button @onclick="StartAutoVerification" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-slate-400 hover:bg-slate-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500" disabled="@(isProcessing || string.IsNullOrEmpty(selectedTemplateId))">
                        Auto Verify All
                    </button>
                    @if (isProcessing)
                    {
                        <button @onclick="StopAutoVerification" class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                            Stop
                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Email Preview Modal -->
@if (showEmailPreview)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl w-11/12 md:w-3/4 lg:w-2/3 xl:w-1/2 max-h-[90vh] overflow-auto">
            <div class="bg-cyan-950 px-4 py-3 rounded-t-lg">
                <h2 class="text-white font-semibold">Email Preview</h2>
            </div>
            <div class="p-4">
                <h3 class="font-medium mb-2">Subject: @previewEmailSubject</h3>
                <div class="border p-4 mb-4 rounded bg-gray-50">
                    <h4 class="font-medium mb-2">Plain Text Version:</h4>
                    <pre class="whitespace-pre-wrap">@previewPlainText</pre>
                </div>
                <div class="border p-4 rounded">
                    <h4 class="font-medium mb-2">HTML Version:</h4>
                    <div class="bg-white border p-4">
                        @((MarkupString)previewHtmlContent)
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg">
                <button @onclick="CloseEmailPreview" class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-gray-500 text-base font-medium text-white hover:bg-gray-600 sm:ml-3 sm:w-auto sm:text-sm">
                    Close
                </button>
            </div>
        </div>
    </div>
}

@code {
    private User user; // Admin

    private List<User> users;

    private Dictionary<string, List<Form>> userForms;

    private List<User> allUsers;
    private List<Form> allForms;
    private List<EmailTemplate> availableTemplates;

    private int currentUserIndex = 0;
    private User currentUser => users != null && users.Any() ? users[currentUserIndex] : null;
    private List<Form> currentUserForms => userForms != null && currentUser != null && userForms.ContainsKey(currentUser.Id) ? userForms[currentUser.Id] : new List<Form>();

    private string successText;
    private string messageText;

    // Variables for auto verification
    private bool isProcessing = false;
    private int currentProcessingIndex = 0;
    private CancellationTokenSource cts = new CancellationTokenSource();

    public enum DisplayOptions2 { All, Reviewed }
    private DisplayOptions2 selectedDisplayOption = DisplayOptions2.All;

    private string selectedDivision;
    private string selectedTemplateId;

    // Email preview variables
    private bool showEmailPreview = false;
    private string previewEmailSubject;
    private string previewPlainText;
    private string previewHtmlContent;

    [Parameter]
    public string Test { get; set; }

    private bool isTest = false;

    private void GoToNextUser()
    {
        successText = null;

        if (users != null && users.Count > 0)
        {
            // Wrap around to the first user if the current is the last one
            currentUserIndex = (currentUserIndex + 1) % users.Count;
        }
        else
        {
            messageText = string.IsNullOrEmpty(messageText) ? "No forms to display." : messageText;
        }
    }

    private void GoToPreviousUser()
    {
        successText = null;

        if (users != null && users.Count > 0)
        {
            // Wrap around to the last user if the current is the first one
            currentUserIndex = (currentUserIndex == 0) ? users.Count - 1 : currentUserIndex - 1;
        }
        else
        {
            messageText = string.IsNullOrEmpty(messageText) ? "No forms to display." : messageText;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        user = await AuthState.GetUserFromAuth(UserData);

        allUsers = await UserData.GetUsers();
        allForms = await FormData.GetForms();

        if (Test is not null && Test == "TEST")
        {
            isTest = true;
        }
    }

    private void OnDisplayOptionChange(DisplayOptions2 options)
    {
        selectedDisplayOption = options;
        OnDivisionSelection();
    }

    private async Task UpdateDivision(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            selectedDivision = e.Value.ToString();
            OnDivisionSelection();
            await LoadTemplatesForDivision();
            StateHasChanged(); // Force UI update after templates are loaded
        }
    }

    private async Task LoadTemplatesForDivision()
    {
        if (!string.IsNullOrEmpty(selectedDivision))
        {
            availableTemplates = await EmailTemplateData.GetEmailTemplatesByDivision(selectedDivision);
            Console.WriteLine($"Found {availableTemplates?.Count ?? 0} templates for division {selectedDivision}");
            selectedTemplateId = "";  // Reset template selection
        }
    }

    private void OnDivisionSelection()
    {
        messageText = ""; // Reset message
        if (!string.IsNullOrWhiteSpace(selectedDivision))
        {
            List<Form> reviewedForms = new();
            if (selectedDisplayOption == DisplayOptions2.All)
            {
                reviewedForms = allForms.Where(f => (f.StatusInfo.Status == "Reviewed" || f.StatusInfo.Status == "Verified") &&
                        f.CompetitionInfo.Division == selectedDivision).ToList();
            }
            else if (selectedDisplayOption == DisplayOptions2.Reviewed)
            {
                reviewedForms = allForms.Where(f => (f.StatusInfo.Status == "Reviewed") &&
                        f.CompetitionInfo.Division == selectedDivision).ToList();
            }

            // Create a dictionary of forms grouped by CreatorId
            userForms = reviewedForms.GroupBy(form => form.Creator)
                                .ToDictionary(group => group.Key, group => group.ToList());

            // Filter users who have forms
            users = allUsers.Where(user => userForms.ContainsKey(user.Id)).ToList();

            if (users.Any())
            {
                currentUserIndex = 0; // Start from the first form in the list
            }
            else
            {
                currentUserIndex = -1;
                messageText = "No forms available in this division.";
            }
        }
    }

    private async Task OnTemplateSelectionChanged(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            selectedTemplateId = e.Value.ToString();
        }
    }

    private string GetStatusSpanCssClass(string status)
    {
        switch (status)
        {
            case "Awaiting Review":
                return "bg-emerald-50 text-emerald-950"; // Light green background with dark green text
            case "Reviewed":
                return "bg-cyan-50 text-cyan-950"; // Light blue background with dark blue text
            case "Verified":
                return "bg-violet-50 text-violet-950"; // Light purple background with dark purple text
            case "Pending":
                return "bg-red-50 text-red-950"; // Light yellow background with dark yellow text
            case "Disqualified":
                return "bg-gray-50 text-gray-950"; // Light red background with dark red text
            case "Withdrawn":
                return "bg-amber-50 text-amber-950"; // Light gray background with dark gray text
            default:
                return "bg-white text-black border-gray-300"; // Default case for unknown statuses
        }
    }

    public static string ToTitleCase(string input)
    {
        if (string.IsNullOrEmpty(input))
        {
            return string.Empty;
        }

        TextInfo textInfo = CultureInfo.CurrentCulture.TextInfo;
        return textInfo.ToTitleCase(input);
    }

    private async Task VerifiedStatus()
    {
        if (string.IsNullOrEmpty(selectedTemplateId))
        {
            successText = "Please select an email template first.";
            return;
        }

        if (currentUserForms.All(x => x.StatusInfo.Status != "Verified") || true) // Modified to allow re-verification
        {
            foreach (var form in currentUserForms)
            {
                await UpdateStatusAndTrackingInfo(form);
            }

            await ConfirmationEmailNotification();
        }
    }

    // New method to start automated verification of all users
    private async Task StartAutoVerification()
    {
        if (users == null || !users.Any() || isProcessing || string.IsNullOrEmpty(selectedTemplateId))
            return;

        // Reset cancellation token
        cts = new CancellationTokenSource();

        isProcessing = true;
        currentProcessingIndex = 0;

        try
        {
            // Start from the current user index
            for (int i = 0; i < users.Count; i++)
            {
                if (cts.Token.IsCancellationRequested)
                    break;

                currentUserIndex = i;
                currentProcessingIndex = i;

                // Verify current user's forms
                if (currentUserForms.Any(x => x.StatusInfo.Status == "Reviewed"))
                {
                    foreach (var form in currentUserForms)
                    {
                        if (cts.Token.IsCancellationRequested)
                            break;

                        await UpdateStatusAndTrackingInfo(form);
                    }

                    await ConfirmationEmailNotification();

                    // Wait for 2 seconds between each user verification
                    if (i < users.Count - 1) // Don't wait after the last user
                    {
                        await Task.Delay(2000, cts.Token);
                    }
                }

                // Force UI refresh
                StateHasChanged();
            }

            successText = "All forms have been verified!";
        }
        catch (TaskCanceledException)
        {
            successText = "Auto verification was stopped.";
        }
        catch (Exception ex)
        {
            successText = $"Error: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    // Method to stop the auto verification process
    private void StopAutoVerification()
    {
        cts.Cancel();
    }

    private async Task UpdateStatusAndTrackingInfo(Form form)
    {
        if ((form.StatusInfo.Status == "Reviewed" || form.StatusInfo.Status == "Verified") && isTest == false) // Avoid Redundency in Tracking
        {
            //Update Status
            form.StatusInfo.Status = "Verified";
            form.StatusInfo.StatusComment = "";

            // Update Tracking Info
            Tracking tracking = new();
            tracking.PerformedById = user.Id;
            tracking.FullName = user.GetFullName();
            tracking.DisplayName = user.DisplayName;
            tracking.UserType = user.UserType;
            tracking.TrackingAction = $"Status Changed: Verified";

            // Enhancing the description to include more context
            // Hard coding Admin because Admin is not a UserType
            var description = $"Form status changed to 'Verified' by {user.DisplayName} (Admin).";
            tracking.Descriptions.Add(description);
            tracking.Descriptions.Add("Email Confirmation Sent");

            form.FormHistory.Add(tracking);

            await FormData.UpdateForm(form);
        }
    }

    private async Task ConfirmationEmailNotification()
    {
        if (string.IsNullOrEmpty(selectedTemplateId))
            return;

        var creatorUser = currentUser;
        var creatorEmail = creatorUser.EmailAddress;
        var creatorDisplayName = ToTitleCase(creatorUser.DisplayName);
        var creatorUserType = creatorUser.UserType;


        // Get the selected template
        var template = await EmailTemplateData.GetEmailTemplate(selectedTemplateId);

        if (template == null)
        {
            successText = "Error: Selected template not found.";
            return;
        }


        // Prepare variables for template processing
        var variables = new Dictionary<string, string>
        {
            {"CreatorDisplayName", creatorDisplayName},
            {"CreatorUserType", creatorUserType},
            {"Year", DateTime.Now.Year.ToString()},
            {"Division", selectedDivision},
            {"StudentList", BuildHtmlContent(currentUserForms)}
        };

        // Process the templates
        var subject = template.Subject;
        foreach (var variable in variables)
        {
            subject = subject.Replace($"{{{{{variable.Key}}}}}", variable.Value);
        }

        var plainText = TemplateProcessor.ProcessTemplate(template.PlainTextTemplate, variables, template.ConditionalBlocks, currentUserForms);
        var htmlContent = TemplateProcessor.ProcessTemplate(template.HtmlTemplate, variables, template.ConditionalBlocks, currentUserForms);

        

        // Also send to the admin for tracking (you can make this configurable)

        if (isTest is true)
        {
            await EmailService.SendEmailAsync("mshiek114@gmail.com", creatorDisplayName, subject, plainText, htmlContent);
        }
        else
        {
            // Send the email
            await EmailService.SendEmailAsync(creatorEmail, creatorDisplayName, subject, plainText, htmlContent);
        }

        successText = $"Email sent successfully to {creatorDisplayName}!";
    }

    private string BuildHtmlContent(List<Form> forms)
    {
        StringBuilder sb = new StringBuilder();

        sb.AppendLine("<table style='width: 100%; border-collapse: collapse; margin-bottom: 20px;'>");
        sb.AppendLine("<thead style='background-color: #f1f5f9;'>");
        sb.AppendLine("<tr>");
        sb.AppendLine("<th style='padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;'>Participant</th>");
        sb.AppendLine("<th style='padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;'>Date of Birth</th>");
        sb.AppendLine("<th style='padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;'>Gender</th>");
        sb.AppendLine("<th style='padding: 10px; text-align: left; border-bottom: 2px solid #e2e8f0;'>Category</th>");
        sb.AppendLine("</tr>");
        sb.AppendLine("</thead>");
        sb.AppendLine("<tbody>");

        foreach (var form in forms)
        {
            sb.AppendLine("<tr>");
            sb.AppendLine($"<td style='padding: 10px; border-bottom: 1px solid #e2e8f0; font-weight: bold;'>{form.PersonalInfo.GetFirstMiddleLastName()}</td>");
            sb.AppendLine($"<td style='padding: 10px; border-bottom: 1px solid #e2e8f0;'>{form.PersonalInfo.DOB}</td>");
            sb.AppendLine($"<td style='padding: 10px; border-bottom: 1px solid #e2e8f0;'>{form.PersonalInfo.Gender}</td>");
            sb.AppendLine($"<td style='padding: 10px; border-bottom: 1px solid #e2e8f0;'>{CategoryPortion(form.CompetitionInfo.Category, form.CompetitionInfo.Portion)}</td>");
            sb.AppendLine("</tr>");
        }

        sb.AppendLine("</tbody>");
        sb.AppendLine("</table>");

        return sb.ToString();
    }

    private string CategoryPortion(string category, string portion)
    {
        if (portion == "NA")
        {
            return category;
        }
        else
        {
            return $"{category}, <small>{portion}</small>";
        }
    }

    private async Task PreviewEmailTemplate()
    {
        if (string.IsNullOrEmpty(selectedTemplateId) || currentUser == null)
            return;

        var template = await EmailTemplateData.GetEmailTemplate(selectedTemplateId);

        if (template == null)
            return;

        var creatorDisplayName = ToTitleCase(currentUser.DisplayName);
        var creatorUserType = currentUser.UserType;

        // Prepare variables for template processing
        var variables = new Dictionary<string, string>
        {
            {"CreatorDisplayName", creatorDisplayName},
            {"CreatorUserType", creatorUserType},
            {"Year", DateTime.Now.Year.ToString()},
            {"Division", selectedDivision},
            {"StudentList", BuildHtmlContent(currentUserForms)}
        };

        // Process the templates
        previewEmailSubject = template.Subject;
        previewPlainText = TemplateProcessor.ProcessTemplate(template.PlainTextTemplate, variables, template.ConditionalBlocks, currentUserForms);
        previewHtmlContent = TemplateProcessor.ProcessTemplate(template.HtmlTemplate, variables, template.ConditionalBlocks, currentUserForms);

        showEmailPreview = true;
    }

    private void CloseEmailPreview()
    {
        showEmailPreview = false;
    }
}