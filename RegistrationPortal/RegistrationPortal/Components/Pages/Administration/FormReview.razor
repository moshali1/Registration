@page "/form-review"
@page "/form-review/{Id}"

@inject IFormData FormData
@inject IUserData UserData
@inject CallFireService CallFire
@inject AuthenticationStateProvider AuthState
@inject FetchSasUri FetchSasUri
@inject IEmailService EmailService
@inject NavigationManager NavManager

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<div class="flex flex-col md:flex-row mx-auto max-w-7xl px-4 sm:px-4 lg:px-4 space-y-4 md:space-y-0 md:space-x-2">
    <div class="flex-initial w-full md:w-3/4 mx-auto max-w-3xl">
        <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="bg-cyan-950 px-4 py-3 sm:px-6">
                <h1 class="text-base font-semibold leading-6 text-white">Form Review</h1>
                <p class="text-sm text-white">Manage and review forms and change status information.</p>
            </div>
            <div class="bg-cyan-800 px-2 py-2 sm:px-6">
                @if (CurrentForm is not null)
                {
                    <!-- Navigation Buttons -->
                    <div class="flex justify-between">
                        <button @onclick="LoadPreviousForm" class="inline-flex justify-center py-1 px-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-950">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mx-2">
                                <path fill-rule="evenodd" d="M7.793 2.232a.75.75 0 0 1-.025 1.06L3.622 7.25h10.003a5.375 5.375 0 0 1 0 10.75H10.75a.75.75 0 0 1 0-1.5h2.875a3.875 3.875 0 0 0 0-7.75H3.622l4.146 3.957a.75.75 0 0 1-1.036 1.085l-5.5-5.25a.75.75 0 0 1 0-1.085l5.5-5.25a.75.75 0 0 1 1.06.025Z" clip-rule="evenodd" />
                            </svg>
                            Previous Form
                        </button>
                        <span class="py-1 px-2 text-sm font-medium text-white">@($"Form {currentIndex + 1} of {Forms.Count}")</span>
                        <button @onclick="LoadNextForm" class="inline-flex justify-center py-1 px-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-950">
                            Next Form
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" class="w-4 h-4 mx-2">
                                <path fill-rule="evenodd" d="M12.207 2.232a.75.75 0 0 0 .025 1.06l4.146 3.958H6.375a5.375 5.375 0 0 0 0 10.75H9.25a.75.75 0 0 0 0-1.5H6.375a3.875 3.875 0 0 1 0-7.75h10.003l-4.146 3.957a.75.75 0 0 0 1.036 1.085l5.5-5.25a.75.75 0 0 0 0-1.085l-5.5-5.25a.75.75 0 0 0-1.06.025Z" clip-rule="evenodd" />
                            </svg>
                        </button>
                    </div>
                }
            </div>
            <div class="px-4 py-2 md:p-6">
                <!-- Division Selection -->
                <div class="sm:flex sm:items-center">
                    <div class="w-full sm:max-w-xs">
                        <label for="division" class="block text-base text-gray-700">Division</label>
                        <select id="division" @bind="SelectedDivision" @oninput="UpdateDivision" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-cyan-500 focus:border-cyan-500 sm:text-sm rounded-md">
                            <option>Select a Division</option>
                            <option value="Memorization">Memorization</option>
                            <option value="Ten Qira'at">Ten Qiraat</option>
                            <option value="Best Voice">Best Voice</option>
                        </select>
                    </div>
                    @* <button @onclick="OnDivisionSelection" class="md:ml-3 mt-5 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-cyan-600 hover:bg-cyan-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-cyan-500">Load Form</button> *@
                </div>
                <!-- Form Details Display -->
                @if (!string.IsNullOrEmpty(messageText))
                {
                    <div class="py-3">
                        <p class="text-base font-semibold text-gray-600">@messageText</p>
                    </div>
                }
                else if (CurrentForm is not null)
                {
                    <div class="mt-5">
                        <h3 class="text-lg leading-6 font-medium text-gray-900">Form Details</h3>
                        <dl class="mt-2 border-t border-b border-gray-200 divide-y divide-gray-200">
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-500">Full Name</dt>
                                <dd class="text-gray-900">@CurrentForm.PersonalInfo.GetFirstMiddleLastName()</dd>
                            </div>
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-500">Date of Birth</dt>
                                <dd class="text-gray-900">@CurrentForm.PersonalInfo.DOB</dd>
                            </div>
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-500">Competition Info</dt>
                                <dd class="text-gray-900">@CurrentForm.CompetitionInfo.Division | @CurrentForm.CompetitionInfo.Category | @CurrentForm.CompetitionInfo.Portion</dd>
                            </div>
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-500">ID and Photo Files</dt>
                                <dd>
                                    @if (idPdf) 
                                    {
                                        <span @onclick="() => OnDownload(idSasUrl)" class="cursor-pointer inline-flex items-center justify-center w-6 h-6 me-2 text-sm font-semibold text-blue-800 bg-gray-100 hover:bg-blue-100 rounded-full dark:bg-gray-700 dark:text-gray-400">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m18.375 12.739-7.693 7.693a4.5 4.5 0 0 1-6.364-6.364l10.94-10.94A3 3 0 1 1 19.5 7.372L8.552 18.32m.009-.01-.01.01m5.699-9.941-7.81 7.81a1.5 1.5 0 0 0 2.112 2.13" />
                                            </svg>
                                            <span class="sr-only">Icon description</span>
                                        </span>
                                    }
                                    else
                                    {
                                        <span @onclick="() => OpenDialog(idSasUrl)" class="cursor-pointer inline-flex items-center justify-center w-6 h-6 me-2 text-sm font-semibold text-blue-800 bg-gray-100 hover:bg-blue-100 rounded-full dark:bg-gray-700 dark:text-gray-400">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 0 0-3.375-3.375h-1.5A1.125 1.125 0 0 1 13.5 7.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H8.25m2.25 0H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 0 0-9-9Z" />
                                            </svg>
                                            <span class="sr-only">Icon description</span>
                                        </span>
                                    }
                                    <span @onclick="() => OpenDialog(photoSasUrl)" class="cursor-pointer inline-flex items-center justify-center w-6 h-6 me-2 text-sm font-semibold text-gray-800 bg-gray-100 hover:bg-blue-100 rounded-full dark:bg-gray-700 dark:text-gray-300">
                                        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                            <path d="M10 0a10 10 0 1 0 10 10A10.011 10.011 0 0 0 10 0Zm0 5a3 3 0 1 1 0 6 3 3 0 0 1 0-6Zm0 13a8.949 8.949 0 0 1-4.951-1.488A3.987 3.987 0 0 1 9 13h2a3.987 3.987 0 0 1 3.951 3.512A8.949 8.949 0 0 1 10 18Z" />
                                        </svg>
                                        <span class="sr-only">Icon description</span>
                                    </span>
                                    @if (SelectedDivision == DivisionConstants.BestVoice)   
                                    {
                                        <span @onclick="() => OnDownload(videoSasUrl)" class="cursor-pointer inline-flex items-center justify-center w-6 h-6 me-2 text-sm font-semibold text-blue-800 bg-gray-100 hover:bg-blue-100 rounded-full dark:bg-gray-700 dark:text-gray-400">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-3 h-3">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="m15.75 10.5 4.72-4.72a.75.75 0 0 1 1.28.53v11.38a.75.75 0 0 1-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 0 0 2.25-2.25v-9a2.25 2.25 0 0 0-2.25-2.25h-9A2.25 2.25 0 0 0 2.25 7.5v9a2.25 2.25 0 0 0 2.25 2.25Z" />
                                            </svg>
                                            <span class="sr-only">Icon description</span>
                                        </span>
                                    }

                                </dd>
                            </div>
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-500">Status</dt>
                                <dd class="text-gray-900">
                                    <span class="inline-flex items-center rounded-md px-2 py-1 font-medium text-800-700 ring-1 ring-inset ring-gray-600/20 @GetStatusSpanCssClass(CurrentForm.StatusInfo.Status)">@CurrentForm.StatusInfo.Status</span>
                                </dd>
                            </div>
                            <div class="py-3 flex justify-between text-sm font-medium">
                                <dt class="text-gray-500">Status Comment</dt>
                                <dd class="text-gray-900">@CurrentForm.StatusInfo.StatusComment</dd>
                            </div>
                        </dl>
                    </div>
                    <!-- Action Bar for Status Change -->
                    <div class="mt-5 flex gap-4">
                        <div class="flex-1">
                            <div class="flex flex-col">
                                <label for="status" class="block text-sm font-medium text-gray-700">Change Status</label>
                                <select id="status" value="@SelectedStatus" @onchange="OnStatusSelect" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm rounded-md">
                                    <option selected>Select a Status</option>
                                    <option value="Awaiting Review">Awaiting Review</option>
                                    <option value="Reviewed">Reviewed</option>
                                    <option value="Verified">Verified</option>
                                    <option value="Pending">Pending</option>
                                    <option value="Disqualified">Disqualified</option>
                                    <option value="Withdrawn">Withdrawn</option>
                                </select>
                                <span class="text-red-600">@errorText</span>
                                <span class="text-emerald-600">@successText</span>
                                <button @onclick="ChangeStatus" class="mt-3 w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-emerald-600 hover:bg-emerald-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-emerald-500">Update Status</button>
                            </div>
                        </div>
                        <div class="flex-1">
                            <label for="statusComment" class="block text-sm font-medium text-gray-700">Status Comment</label>
                            <textarea id="statusComment" @bind="StatusComment" rows="3" class="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-emerald-500 focus:border-emerald-500 sm:text-sm rounded-md"></textarea>
                        </div>
                    </div>
                    
                }
            </div>
            <div class="bg-cyan-800 px-2 py-2 sm:px-6">
                @if (CurrentForm is not null)   
                {
                    <!-- Navigation Buttons -->
                    <div class="flex justify-center">
                        <a href="details/@CurrentForm.Id" target="_blank" class="text-white block px-2 py-1 text-sm outline outline-1 rounded-md mx-1 hover:bg-cyan-950">Details</a>
                        <a href="edit/@CurrentForm.CompetitionInfo.Division/@CurrentForm.Id" target="_blank" class="text-white block px-2 py-1 text-sm outline outline-1 rounded-md mx-1 hover:bg-cyan-950">Edit</a>
                        <a href="track-changes/@CurrentForm.Id" target="_blank" class="text-white block px-2 py-1 text-sm cursor-pointer outline outline-1 rounded-md mx-1 hover:bg-cyan-950">Tracking</a>
                    </div>
                }
            </div>
        </div>
    </div>
    <!-- New Table to the Right -->
    <div class="flex-initial w-full md:w-1/4 px-2 sm:px-6 lg:px-4">
        <div class="sm:flex sm:items-center">
            <div class="sm:flex-auto">
                <h1 class="text-xl font-semibold leading-6 text-gray-900">Pending Comments</h1>
                <p class="mt-2 text-sm text-gray-700">A list of the most common pending status comments.</p>
            </div>
        </div>
        <div class="flow-root">
            <div class="py-2 align-middle">
                <div class="overflow-hidden shadow sm:rounded-lg">
                    <table class="min-w-full divide-y divide-gray-300">
                        <thead class="bg-gray-50">
                            <tr>
                                <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-gray-900 sm:pl-6">Status Comments</th>
                            </tr>
                        </thead>
                        <tbody class="divide-y divide-gray-200 bg-white">
                            <tr>
                                <td @onclick="() => LoadComment('a')" class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 hover:bg-gray-100 cursor-pointer"><span class="underline decoration-sky-500 font-semibold">Invalid ID:</span> Please edit form and upload an ID of the competitor.</td>
                            </tr>
                            <tr>
                                <td @onclick="() => LoadComment('b')" class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 hover:bg-gray-100 cursor-pointer"><span class="underline decoration-sky-500 font-semibold">Invalid ID:</span> Please edit form and upload an Identification Document (ID).</td>
                            </tr>
                            <tr>
                                <td @onclick="() => LoadComment('c')" class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 hover:bg-gray-100 cursor-pointer"><span class="underline decoration-teal-500 font-semibold">Invalid Photo:</span> Please edit form and upload a clear, standalone photo image.</td>
                            </tr>
                            <tr>
                                <td @onclick="() => LoadComment('f')" class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 hover:bg-gray-100 cursor-pointer"><span class="underline decoration-teal-500 font-semibold">Invalid Photo:</span> Please edit form and upload a non-cropped, non-blury photo. See photo requirements.</td>
                            </tr>
                            <tr>
                                <td @onclick="() => LoadComment('d')" class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 hover:bg-gray-100 cursor-pointer"><span class="underline decoration-fuchsia-500 font-semibold">Missing Video:</span> Please edit form and upload a video.</td>
                            </tr>
                            <tr>
                                <td @onclick="() => LoadComment('e')" class="py-4 pl-4 pr-3 text-sm font-medium text-gray-900 sm:pl-6 hover:bg-gray-100 cursor-pointer"><span class="underline decoration-fuchsia-500 font-semibold">Invalid Video:</span> Please edit form and upload a video of the assigned Ayat.</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Dialog Component -->
@if (dialogImageUrl != null)
{
    <div @onclick="CloseDialog" class="fixed top-0 left-0 w-full h-full flex items-center justify-center bg-black bg-opacity-50">
        <div class="relative max-w-3xl max-h-[90vh] p-4 @(isScaled ? "border border-gray-800" : "")">
            <img src="@dialogImageUrl" alt="Dialog Image" class="max-w-full max-h-[720px] @(rotationClass) @(scaleClass)" />
            <button class="absolute top-0 right-0 p-2 bg-black bg-opacity-70 rounded-full text-gray-100 hover:text-gray-300" @onclick="CloseDialog">
                <!-- Close Icon -->
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                </svg>
            </button>
            <button class="absolute top-0 right-12 p-2 bg-black bg-opacity-70 rounded-full text-gray-100 hover:text-gray-300" @onclick="ScaleImage" @onclick:stopPropagation>
                @if (isScaled)
                {
                    <!-- Scale Out Icon -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 16 16" stroke="currentColor">
                        <path fill-rule="evenodd" d="M5.828 10.172a.5.5 0 0 0-.707 0l-4.096 4.096V11.5a.5.5 0 0 0-1 0v3.975a.5.5 0 0 0 .5.5H4.5a.5.5 0 0 0 0-1H1.732l4.096-4.096a.5.5 0 0 0 0-.707m4.344-4.344a.5.5 0 0 0 .707 0l4.096-4.096V4.5a.5.5 0 1 0 1 0V.525a.5.5 0 0 0-.5-.5H11.5a.5.5 0 0 0 0 1h2.768l-4.096 4.096a.5.5 0 0 0 0 .707" />
                    </svg>
                }
                else
                {
                    <!-- Scale In Icon -->
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 16 16" stroke="currentColor">
                        <path fill-rule="evenodd" d="M.172 15.828a.5.5 0 0 0 .707 0l4.096-4.096V14.5a.5.5 0 1 0 1 0v-3.975a.5.5 0 0 0-.5-.5H1.5a.5.5 0 0 0 0 1h2.768L.172 15.121a.5.5 0 0 0 0 .707M15.828.172a.5.5 0 0 0-.707 0l-4.096 4.096V1.5a.5.5 0 1 0-1 0v3.975a.5.5 0 0 0 .5.5H14.5a.5.5 0 0 0 0-1h-2.768L15.828.879a.5.5 0 0 0 0-.707" />
                    </svg>
                }
            </button>
            <button class="absolute top-0 right-24 p-2 bg-black bg-opacity-70 rounded-full text-gray-100 hover:text-gray-300" @onclick="RotateImage" @onclick:stopPropagation>
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 16 16" stroke="currentColor">
                    <path fill-rule="evenodd" d="M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2z" />
                    <path d="M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466" />
                </svg>
            </button>
        </div>
    </div>
}

@code {
    [Parameter] public string Id { get; set; }

    private User user;

    private List<Form> AllForms; // Holds all forms
    private List<Form> Forms = new();
    private string SelectedDivision;
    private string SelectedStatus;
    private string StatusComment;
    private Form CurrentForm;
    private int currentIndex = -1;

    private bool idPdf = false;
    private string idSasUrl;
    private string photoSasUrl;
    private string videoSasUrl;

    private string messageText;
    private string errorText;
    private string successText;

    protected override async Task OnInitializedAsync()
    {
        user = await AuthState.GetUserFromAuth(UserData);

        AllForms = await FormData.GetForms(); // Fetch all forms once and store them

        if (!string.IsNullOrWhiteSpace(Id))
        {
            // When there is a parameter ID
            CurrentForm = AllForms.FirstOrDefault(f => f.Id == Id);

            if (CurrentForm != null)
            {
                SelectedDivision = CurrentForm.CompetitionInfo.Division;
                // Filter AllForms by the current form's division for subsequent navigation
                Forms = AllForms.Where(f => f.CompetitionInfo.Division == SelectedDivision).ToList();
                // Update currentIndex to the index of CurrentForm for correct "Next Form" functionality
                currentIndex = Forms.FindIndex(f => f.Id == CurrentForm.Id);

                LoadSasUrl();
            }
        }
    }

    private void  OnDivisionSelection()
    {
        messageText = ""; // Reset message
        if (!string.IsNullOrWhiteSpace(SelectedDivision))
        {
            var filteredForms = AllForms.Where(f => f.CompetitionInfo.Division == SelectedDivision).ToList();

            if (filteredForms.Any())
            {
                Forms = filteredForms;
                currentIndex = 0; // Start from the first form in the list
                CurrentForm = Forms[currentIndex]; // Automatically load the first form

                LoadSasUrl();
            }
            else
            {
                Forms.Clear();
                CurrentForm = null;
                currentIndex = -1;
                messageText = "No forms available in this division.";
            }
        }
    }

    private void LoadSasUrl()
    {
        // sperate method?
        idSasUrl = FetchSasUri.GetSasUri(CurrentForm.FileUploadInfo.IDFileName);
        photoSasUrl = FetchSasUri.GetSasUri(CurrentForm.FileUploadInfo.PhotoFileName);
        if (SelectedDivision == DivisionConstants.BestVoice)    
        {
            videoSasUrl = FetchSasUri.GetSasUri(CurrentForm.FileUploadInfo.VideoFileName);
        }

        if (String.IsNullOrWhiteSpace(idSasUrl))
        {
            idSasUrl = "/images/filenotfound.png";
        }

        if (String.IsNullOrWhiteSpace(photoSasUrl))
        {
            photoSasUrl = "/images/filenotfound.png";
        }

        if (CurrentForm.FileUploadInfo.IDFileExtension == ".pdf")
        {
            idPdf = true;
        }
    }

    private void LoadNextForm()
    {
        successText = null;
        SelectedStatus = null;
        StatusComment = null;
        idPdf = false;
        if (Forms.Count > 0)
        {
            currentIndex = (currentIndex + 1) % Forms.Count; // Loop back to the first form after reaching the end
            CurrentForm = Forms[currentIndex];
            messageText = ""; // Clear the message when a form is successfully loaded

            LoadSasUrl();

        }
        else
        {
            CurrentForm = null; // No form is loaded if the list is empty
                                // Update the message only if it's not already set by OnDivisionSelection
            messageText = string.IsNullOrEmpty(messageText) ? "No forms to display." : messageText;
        }
    }

    private void LoadPreviousForm()
    {
        successText = null;
        SelectedStatus = null;
        StatusComment = null;
        idPdf = false;

        if (Forms.Count > 0)
        {
            // Adjust currentIndex to move to the previous form, wrapping around to the last form if necessary
            currentIndex = (currentIndex - 1 + Forms.Count) % Forms.Count;
            CurrentForm = Forms[currentIndex];
            messageText = ""; // Clear the message when a form is successfully loaded

            LoadSasUrl();
        }
        else
        {
            CurrentForm = null; // No form is loaded if the list is empty
                                // Update the message only if it's not already set by OnDivisionSelection
            messageText = string.IsNullOrEmpty(messageText) ? "No forms to display." : messageText;
        }
    }

    private void OnStatusSelect(ChangeEventArgs e)
    {
        errorText = null;
        successText = null;
        if (e.Value is not null)
        {
            SelectedStatus = e.Value.ToString();
            if (SelectedStatus == "Verified")
            {
                StatusComment = "Email Confirmation Sent";
            }
            else if (SelectedStatus == "Withdrawn")
            {
                StatusComment = "Requested to be Withdrawn";
            }
            else if (SelectedStatus == "Reviewed")
            {
                StatusComment = "ID, photo, and form details confirmed to meet all requirements.";
            }
            else
            {
                StatusComment = "";
            }
        }
    }

    private void UpdateTrackingInfo()
    {
        Tracking tracking = new();
        tracking.PerformedById = user.Id;
        tracking.FullName = user.GetFullName();
        tracking.DisplayName = user.DisplayName;
        tracking.UserType = user.UserType;
        tracking.TrackingAction = $"Status Changed: {SelectedStatus}";
        // if (SelectedDivision == "Pending" || SelectedDivision == "Verified")
        // {
        //     tracking.IsVisible = false;
        // }

        // Enhancing the description to include more context
        // Hard coding Admin because Admin is not a UserType
        var description = $"Form status changed to '{SelectedStatus}' by {user.DisplayName} (Admin).";
        tracking.Descriptions.Add(description);
        tracking.Descriptions.Add($"Status Comment: {StatusComment}");
        tracking.Descriptions.Add("Email Notification of Pending Status Sent to Registrant.");

        // Assuming 'form.FormHistory' is a List<Tracking> or similar
        CurrentForm.FormHistory.Add(tracking);
    }

    private async Task ChangeStatus()
    {
        errorText = null;
        if (CurrentForm != null)
        {
            if (SelectedStatus is null) 
            {
                errorText = "Select a status";
                return;
            }

            CurrentForm.StatusInfo.Status = SelectedStatus;
            CurrentForm.StatusInfo.StatusComment = StatusComment;

            UpdateTrackingInfo();

            await FormData.UpdateForm(CurrentForm);

            // await HandlePendingEmailSubmit();
            if (SelectedStatus == "Pending")
            {
                // await SendPendingStatusSmsNotificaiton();
                await SendPendingStatusEmailNotification();
            }

            SelectedStatus = null;
            StatusComment = null;

        }
    }

    private string GetStatusSpanCssClass(string status)
    {
        switch (status)
        {
            case "Awaiting Review":
                return "bg-emerald-50 text-emerald-950"; // Light green background with dark green text
            case "Reviewed":
                return "bg-cyan-50 text-cyan-950"; // Light blue background with dark blue text
            case "Verified":
                return "bg-violet-50 text-violet-950"; // Light purple background with dark purple text
            case "Pending":
                return "bg-red-50 text-red-950"; // Light yellow background with dark yellow text
            case "Disqualified":
                return "bg-gray-50 text-gray-950"; // Light red background with dark red text
            case "Withdrawn":
                return "bg-amber-50 text-amber-950"; // Light gray background with dark gray text
            default:
                return "bg-white text-black border-gray-300"; // Default case for unknown statuses
        }
    }

    private void UpdateDivision(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            SelectedDivision = e.Value.ToString();
            OnDivisionSelection();
        }
    }

    private string dialogImageUrl;
    private string rotationClass = "";
    private string scaleClass = "";
    private bool isScaled = false;

    private void OpenDialog(string imageUrl)
    {
        dialogImageUrl = imageUrl;
    }

    private void CloseDialog()
    {
        dialogImageUrl = null;
        rotationClass = "";
        scaleClass = "";
    }

    void RotateImage()
    {
        // Cycle through predefined rotation classes
        var rotations = new[] { "", "-rotate-90", "rotate-180", "rotate-90" };
        var currentIndex = Array.IndexOf(rotations, rotationClass);
        rotationClass = rotations[(currentIndex + 1) % rotations.Length];
    }

    void ScaleImage()
    {
        isScaled = !isScaled; // Toggle the scale state
                              // Toggle between scale classes
        scaleClass = scaleClass == "" ? "scale-75" : ""; // Example: Toggle between no scale and 75%
    }

    private void OnDownload(string sasUri)
    {
        NavManager.NavigateTo(sasUri);
    }

    // private async Task HandlePendingEmailSubmit()
    // {
    //     // Assuming you collect the necessary information from the form
    //     var creatorUser = await UserData.GetUser(CurrentForm.Creator);
    //     var creatorEmail = creatorUser.EmailAddress;

    //     string userEmail = creatorEmail; // The user's email address
    //     string subject = "Action Required: Pending Submission";
    //     // string messageBody = @"
    //     //     <div style='font-family: Arial, sans-serif;'>
    //     //         <h1 style='color: #333;'>Your Submission is Pending</h1>
    //     //         <p>Your recently submitted form is pending and requires immediate attention. Please log into your account and make the necessary changes before the registration period ends.</p>
    //     //         <p><strong>Deadline:</strong> 03/17/2024 11:59 CT</p>
    //     //         <p><a href='https://register.imamshatibi.org' style='background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; display: inline-block;'>Log in to your account</a></p>
    //     //     </div>
    //     // ";
    //     string messageBody = "This is a test email from Imam Al-Shatibi Quran Competition";

    //     var result = await EmailService.SendEmailAsync(userEmail, subject, messageBody);

    //     if (result.IsSuccessStatusCode) // Assuming IsSuccessStatusCode indicates success
    //     {
    //         successText = "Email sent successfully!";
    //     }
    //     else
    //     {
    //         Console.WriteLine(result.StatusCode.ToString());
    //     }
    // }

    private async Task SendPendingStatusSmsNotificaiton()
    {
        var creatorUser = await UserData.GetUser(CurrentForm.Creator);
        var creatorUserType = creatorUser.UserType;

        string userPhoneNumber;
        if (creatorUserType == "Teacher")   
        {
            userPhoneNumber = CurrentForm.TeacherInfo.TeacherPhoneNumber;
        }
        else
        {
            userPhoneNumber = CurrentForm.ParentInfo.ParentPhoneNumber;
        }

        string message = "Hello from Blazor via Twilio!";

        CallFire.SendSms(userPhoneNumber, message);

        successText = "Email sent successfully!";
    }

    private void LoadComment(char comment)
    {
        switch (comment)
        {
            case 'a':
                SelectedStatus = "Pending";
                StatusComment = "Invalid ID: Please edit form and upload an ID of the competitor.";
                break;
            case 'b':
                SelectedStatus = "Pending";
                StatusComment = "Invalid ID: Please edit form and upload an Identification Document (ID).";
                break;
            case 'c':
                SelectedStatus = "Pending";
                StatusComment = "Invalid Photo: Please edit form and upload a clear, standalone photo image.";
                break;
            case 'f':
                SelectedStatus = "Pending";
                StatusComment = "Invalid Photo: Please edit form and upload a non-cropped, non-blury photo. See photo requirements.";
                break;
            case 'd':
                SelectedStatus = "Pending";
                StatusComment = "Missing Video: Please edit form and upload a video.";
                break;
            case 'e':
                SelectedStatus = "Pending";
                StatusComment = "Invalid Video: Please edit form and upload a video of the assigned Ayat.";
                break;
            default:
                StatusComment = "";
                break;
        }
    }

    private async Task SendPendingStatusEmailNotification()
    {
        var creatorUser = await UserData.GetUser(CurrentForm.Creator);
        var creatorEmail = creatorUser.EmailAddress;
        var creatorDisplayName = creatorUser.DisplayName;

        var subject = $"Imam Shatibi Registration {DateTime.Today.Year.ToString()}: {SelectedStatus} Form Status";

        var plainText = $"Assalamu Alaikum {creatorDisplayName},\n\n" +
                        $"We are writing to inform you that your submission for the Imam Al-Shatibi Quran Competition Registration {DateTime.Now.Year}, in the \"{SelectedDivision}\" division, for student {CurrentForm.PersonalInfo.GetFirstMiddleLastName()}, is currently marked as pending.\n\n" +
                        $"Status Comment: {StatusComment}\n\n" +
                        $"To ensure your participation, please address the noted issue(s) as soon as possible before the registration closes on 3/17/2024. Should you have any questions or require further assistance, do not hesitate to get in touch.\n\n" +
                        $"Thank you for your attention to this matter.\n\n" +
                        $"If you need to contact us, please reply to this email or call us at (612) 800-4435 from 8 AM to 8 PM CT.\n\n" +
                        $"To edit your form, please visit: https://register.imamshatibi.org\n\n" +
                        $"JazakAllahu Khairan,\n" +
                        $"Imam Al-Shatibi Quran Competition";



        var htmlContent = $@"
                        <div style='font-family: Arial, sans-serif; line-height: 1.6; max-width: 600px; margin: auto; padding: 20px;'>
                            <div style='margin-top: 20px;'>
                                <p>Assalamu Alaikum {creatorDisplayName},</p>
                                <p>We are writing to inform you that your submission for the Imam Al-Shatibi Quran Competition Registration {DateTime.Now.Year}, in the &quot;{SelectedDivision}&quot; division, for student <strong>{CurrentForm.PersonalInfo.GetFirstMiddleLastName()}</strong>, is currently marked as pending.</p>
                                <p>Status Comment: <strong>{StatusComment}</strong></p>
                                <p>To ensure your participation, please address the noted issue(s) as soon as possible before the registration closes on 3/17/2024. Should you have any questions or require further assistance, do not hesitate to get in touch.</p>
                                <p>Thank you for your attention to this matter.</p>
                            </div>
                            <div style='margin-top: 20px;'>
                                <p>If you need to contact us, please reply to this email or call us at (612) 800-4435 from 8 AM to 8 PM CT.</p>
                                <p>To edit your form, please visit: <a href='https://register.imamshatibi.org' target='_blank'>https://register.imamshatibi.org</a></p>
                            </div>
                            <div style='margin-top: 20px; font-size: 0.9em; text-align: center; color: #555;'>
                                JazakAllahu Khairan,<br>
                                Imam Al-Shatibi Quran Competition
                            </div>
                        </div>";

        await EmailService.SendEmailAsync(creatorEmail, creatorDisplayName, subject, plainText, htmlContent);

        successText = "Email sent successfully!";
    }
}
