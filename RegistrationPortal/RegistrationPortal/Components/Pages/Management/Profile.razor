@page "/profile"
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager
@inject AuthenticationStateProvider authProvider
@inject IUserData UserData
@inject IConfiguration _configuration
@attribute [Authorize]
@using Azure.Identity
@using Microsoft.Graph
@using Microsoft.Graph.Models
@using Microsoft.Graph.Models.ODataErrors;

@attribute [StreamRendering]

<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-3xl">
        <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="bg-cyan-950 px-4 py-5 sm:px-6">
                <h1 class="text-base font-semibold leading-6 text-white">Profile</h1>
                <p class="text-sm text-white">Manage your account details and settings here.</p>
            </div>
            <div class="px-4 py-5 sm:p-6">
                @* @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-4" role="alert">
                        <p class="font-bold">Error</p>
                        <p>@errorMessage</p>
                    </div>
                } *@
                @if (isLoading)
                {
                    <div class="animate-pulse">
                        <div class="mb-4">
                            <h6 class="mb-0">Display Name:</h6>
                            <div class="w-1/2 h-2 bg-slate-300 rounded"></div>
                        </div>
                        <div class="mb-4">
                            <h6 class="mb-0">Full Name:</h6>
                            <div class="w-1/4 h-2 bg-slate-300 rounded"></div>
                        </div>
                        <div class="mb-4">
                            <h6 class="mb-0">User Type:</h6>
                            <div class="w-1/4 h-2 bg-slate-300 rounded"></div>
                        </div>
                        <div class="mb-4">
                            <h6 class="mb-0">Identities:</h6>
                            <div><small>Sign-in Type: <span class="inline-block w-24 h-2 bg-slate-300 rounded"></span></small></div>
                            <div><small>Issuer: <span class="inline-block w-24 h-2 bg-slate-300 rounded"></span></small></div>
                            <div><small>Issuer Assigned ID: <span class="inline-block w-24 h-2 bg-slate-300 rounded"></span></small></div>
                        </div>
                        @if (user.UserTypeCustom is null)
                        {
                            <div class="mb-4">
                                <h6 class="mb-0">ID:</h6>
                                <div class="w-24 h-2 bg-slate-300 rounded"></div>
                            </div>
                        }
                    </div>

                }
                else
                {
                    <div>
                        <div class="mb-4">
                            <h6 class="mb-0">Display Name:</h6>
                            <small>@user.DisplayName</small>
                        </div>
                        <div class="mb-4">
                            <h6 class="mb-0">Full Name:</h6>
                            <small>
                                @(user.GivenName == "" ? "Not Provided" : user.GivenName)
                                @user.Surname
                            </small>
                        </div>
                        <div class="mb-4">
                            <h6 class="mb-0">User Type:</h6>
                            <small>@user.UserTypeCustom</small>
                        </div>
                        <div class="mb-4">
                            <h6 class="mb-0">Identities:</h6>
                            <div><small>Sign-in Type: @user.SignInType</small></div>
                            @* <div><small>Issuer: @user.Issuer</small></div> *@
                            <div><small>Issuer Assigned ID: @user.IssuerAssignedId</small></div>
                        </div>
                        @if (user.UserTypeCustom is null)
                        {
                            <div class="mb-4">
                                <h6 class="mb-0">ID:</h6>
                                <small>@user.Id</small>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {

    private string errorMessage;

    private bool isLoading = true;

    private GraphUser user = new();

    // Graph API settings
    private readonly string[] scopes = new string[] { "https://graph.microsoft.com/.default" };

    private string tenantId;
    private string clientId;
    private string clientSecret;
    private string extensionAttributes;

    private string objectId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Read from Azure AD B2C Management Settings
            tenantId = _configuration["MicrosoftGraph:TenantId"];
            clientId = _configuration["MicrosoftGraph:ClientId"];
            clientSecret = _configuration["MicrosoftGraph:ClientSecret"];
            extensionAttributes = _configuration["MicrosoftGraph:ExtensionAttributes"];

            // Check if config values were retrieved properly
            if (string.IsNullOrEmpty(tenantId) || string.IsNullOrEmpty(clientId) ||
                string.IsNullOrEmpty(clientSecret) || string.IsNullOrEmpty(extensionAttributes))
            {
                throw new Exception("One or more Microsoft Graph configuration values are missing");
            }

            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Get the user's object ID from claims.
            objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

            if (string.IsNullOrEmpty(objectId))
            {
                throw new Exception("Could not retrieve user object ID from claims");
            }

            await ReadProfile(objectId);

            ConstructQueryString();
        }
        catch (Exception ex)
        {
            errorMessage = $"Initialization error: {ex.Message}";
            isLoading = false; // Important: set loading to false on error
        }
    }

    private async Task ReadProfile(string userObjectId)
    {
        try
        {
            Console.WriteLine($"Attempting to fetch profile for user ID: {userObjectId}");

            var clientSecretCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);
            var graphClient = new GraphServiceClient(clientSecretCredential, scopes);

            User profile = await graphClient.Users[userObjectId].GetAsync(requestConfiguration =>
            {
                requestConfiguration.QueryParameters.Select = new string[] { "Id", "identities", "displayName", "GivenName", "Surname", $"{extensionAttributes}_UserType" };
                requestConfiguration.QueryParameters.Expand = new string[] { "Extensions" };
            });

            if (profile == null)
            {
                throw new Exception("User profile not found");
            }

            // Populate the user's attributes
            user.Id = profile.Id;
            user.DisplayName = profile.DisplayName ?? "";
            user.Surname = profile.Surname ?? "";
            user.GivenName = profile.GivenName ?? "";

            // Get the custom user type from the extension attributes
            object userTypeCustom;
            if (profile.AdditionalData != null && profile.AdditionalData.TryGetValue($"{extensionAttributes}_UserType", out userTypeCustom))
            {
                user.UserTypeCustom = userTypeCustom?.ToString();
            }

            // Get the user identities
            if (profile.Identities != null && profile.Identities.Count > 0)
            {
                GetIdentities(profile.Identities);
            }
            else
            {
                Console.WriteLine("No identities found in the user profile");
            }

            isLoading = false;
        }
        catch (ServiceException graphEx)
        {
            Console.WriteLine($"Graph API error: {graphEx.Message}");
            errorMessage = $"Microsoft Graph error: {graphEx.Message}";
            if (graphEx.InnerException != null)
            {
                Console.WriteLine($"Inner exception: {graphEx.InnerException.Message}");
            }
            isLoading = false; // Important: set loading to false on error
        }
        catch (Exception ex)
        {
            Console.WriteLine($"General error: {ex.Message}");
            errorMessage = $"Cannot read the profile due to the following error: {ex.Message}";
            isLoading = false; // Important: set loading to false on error
        }
    }

    private void GetIdentities(List<ObjectIdentity> identities)
    {
        foreach (var identity in identities!)
        {
            if (identity.SignInType == "userPrincipalName")
            {
                continue;
            }
            else
            {
                user.Issuer = identity.Issuer;
                user.IssuerAssignedId = identity.IssuerAssignedId;
                user.SignInType = identity.SignInType;
            }
        }
    }

    private void ConstructQueryString()
    {
        var profileInfo = new
        {
            DisplayName = user.DisplayName,
            FirstName = user.GivenName,
            LastName = user.Surname,
            UserType = user.UserTypeCustom
        };
    }

    // This class would need to be defined somewhere in your code
    public class GraphUser
    {
        public string Id { get; set; }
        public string DisplayName { get; set; }
        public string GivenName { get; set; }
        public string Surname { get; set; }
        public string UserTypeCustom { get; set; }
        public string Issuer { get; set; }
        public string IssuerAssignedId { get; set; }
        public string SignInType { get; set; }
    }
}