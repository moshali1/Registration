@using AutoMapper
@inject FormSelectionService FormSelection
@inject NavigationManager NavManager
@inject IMapper Mapper

@if (Show is true)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 z-50"></div>
    <div class="overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-50 flex justify-center items-center w-full h-full max-h-full">
        <div class="relative p-4 w-full max-w-md max-h-full z-50">
            <!-- Modal content -->
            <div class="relative bg-white rounded-lg shadow dark:bg-gray-700">
                <!-- Modal header -->
                <div class="flex items-center justify-between p-4 md:p-5 border-b rounded-t dark:border-gray-600">
                    <h3 class="text-lg font-semibold text-gray-900 dark:text-white">
                        @(CurrentStep == Step.SelectFormType ? "Select Form Type" : $"Select Form ({Year})")
                    </h3>
                    <button @onclick="CloseModal" type="button" class="text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm h-8 w-8 ms-auto inline-flex justify-center items-center dark:hover:bg-gray-600 dark:hover:text-white">
                        <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                            <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6" />
                        </svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>

                <!-- Modal body - reduced top padding -->
                <div class="px-4 pb-4 pt-2 md:px-5 md:pb-5 md:pt-2 max-h-[calc(100vh-200px)] overflow-y-auto">
                    @if (CurrentStep == Step.SelectFormType)
                    {
                        <p class="text-gray-500 dark:text-gray-400 mb-3 mt-0">First, select which type of form you want to create:</p>
                        <ul class="space-y-3 mb-4">
                            <li>
                                <div @onclick="() => SelectFormType(DivisionConstants.Memorization)"
                                     class="@GetFormTypeClass(DivisionConstants.Memorization)">
                                    <div class="block">
                                        <div class="w-full text-lg font-semibold">Memorization</div>
                                        <div class="w-full text-gray-500 dark:text-gray-400">Quran memorization competition</div>
                                    </div>
                                    <svg class="w-4 h-4 ms-3 rtl:rotate-180 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" /></svg>
                                </div>
                            </li>
                            <li>
                                <div @onclick="() => SelectFormType(DivisionConstants.TenQiraat)"
                                     class="@GetFormTypeClass(DivisionConstants.TenQiraat)">
                                    <div class="block">
                                        <div class="w-full text-lg font-semibold">Ten Qira'at</div>
                                        <div class="w-full text-gray-500 dark:text-gray-400">Ten Qira'at recitation competition</div>
                                    </div>
                                    <svg class="w-4 h-4 ms-3 rtl:rotate-180 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" /></svg>
                                </div>
                            </li>
                            @* <li @onclick="() => SelectFormType(DivisionConstants.BestVoice)">
                                <input type="radio" id="bestvoice" name="formType" value="bestvoice" class="hidden peer" required />
                                <label for="bestvoice" class="@GetFormTypeClass(DivisionConstants.BestVoice)">
                                    <div class="block">
                                        <div class="w-full text-lg font-semibold">Best Voice</div>
                                        <div class="w-full text-gray-500 dark:text-gray-400">Best voice recitation competition</div>
                                    </div>
                                    <svg class="w-4 h-4 ms-3 rtl:rotate-180 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" /></svg>
                                </label>
                            </li> *@
                            <li>
                                <div @onclick="() => SelectFormType(DivisionConstants.IslamicStudies)"
                                     class="@GetFormTypeClass(DivisionConstants.IslamicStudies)">
                                    <div class="block">
                                        <div class="w-full text-lg font-semibold">Islamic Studies</div>
                                        <div class="w-full text-gray-500 dark:text-gray-400">Islamic Studies competition</div>
                                    </div>
                                    <svg class="w-4 h-4 ms-3 rtl:rotate-180 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" /></svg>
                                </div>
                            </li>
                        </ul>
                    }
                    else
                    {
                        <div class="mt-0">
                            <p class="text-gray-500 dark:text-gray-400 mb-2 mt-0">
                                Now select a previous form to use as a template for your new <b>@SelectedFormType</b> form:
                            </p>
                            <div class="mb-3 flex">
                                <button @onclick="GoBackToFormTypeSelection"
                                        class="text-cyan-700 bg-transparent hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-3 py-1.5 text-center inline-flex items-center">
                                    <svg class="w-3.5 h-3.5 mr-2 rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10">
                                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" />
                                    </svg>
                                    Back
                                </button>
                            </div>
                            <ul class="space-y-3 mb-4">
                                @if (ArchivedForms is not null && ArchivedForms.Any())
                                {
                                    @for (int i = 0; i < ArchivedForms.Count; i++)
                                    {
                                        var form = ArchivedForms[i];
                                        <li>
                                            <div @onclick="() => SelectAndNavigate(form)"
                                                 class="inline-flex items-center justify-between w-full p-4 text-gray-900 bg-white border border-gray-200 rounded-lg cursor-pointer hover:text-gray-900 hover:bg-gray-100 dark:text-white dark:bg-gray-600 dark:hover:bg-gray-500">
                                                <div class="block">
                                                    <div class="w-full text-lg font-semibold">@form.PersonalInfo.GetFullName()</div>
                                                    <div class="w-full text-gray-500 dark:text-gray-400">@form.CompetitionInfo.Division</div>
                                                    @if (form.CompetitionInfo.Division != SelectedFormType)
                                                    {
                                                        <div class="w-full text-amber-600 text-xs mt-1">
                                                            <svg class="inline-block w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                                                                <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                                                            </svg>
                                                            Division, Category & Portion will be reset
                                                        </div>
                                                    }
                                                </div>
                                                <svg class="w-4 h-4 ms-3 rtl:rotate-180 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9" /></svg>
                                            </div>
                                        </li>
                                    }
                                }
                                else
                                {
                                    <p class="text-gray-800 dark:text-gray-400 mb-2"><b>No forms</b> from @Year were found in your account.</p>
                                }
                            </ul>
                        </div>
                    }

                    <button @onclick="CloseModal" class="text-white inline-flex w-full justify-center bg-cyan-700 hover:bg-cyan-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-cyan-600 dark:hover:bg-cyan-700 dark:focus:ring-cyan-800">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    // Code section remains the same as in the previous version
    private enum Step
    {
        SelectFormType,
        SelectForm
    }

    private Step CurrentStep = Step.SelectFormType;
    private string SelectedFormType = "";

    [Parameter]
    public bool Show { get; set; } = false;

    [Parameter]
    public List<Form> ArchivedForms { get; set; }

    [Parameter]
    public int Year { get; set; } = 2024;

    [Parameter]
    public EventCallback OnClose { get; set; }

    protected override void OnParametersSet()
    {
        // Reset state when modal is opened
        if (Show)
        {
            CurrentStep = Step.SelectFormType;
            SelectedFormType = "";
        }
    }

    private void CloseModal()
    {
        // Reset state
        CurrentStep = Step.SelectFormType;
        SelectedFormType = "";

        Show = false;
        OnClose.InvokeAsync();
    }

    private void GoBackToFormTypeSelection()
    {
        CurrentStep = Step.SelectFormType;
    }

    private void SelectFormType(string formType)
    {
        SelectedFormType = formType;
        CurrentStep = Step.SelectForm;
        StateHasChanged(); // Ensure UI updates
    }

    private string GetFormTypeClass(string formType)
    {
        string baseClass = "inline-flex items-center justify-between w-full p-4 text-gray-900 bg-white border border-gray-200 rounded-lg cursor-pointer hover:text-gray-900 hover:bg-gray-100";

        if (SelectedFormType == formType)
        {
            return baseClass + " border-cyan-600 text-cyan-600";
        }

        return baseClass;
    }

    private void SelectAndNavigate(Form selectedForm)
    {
        try
        {
            string urlDivision = "";

            switch (SelectedFormType)
            {
                case "Memorization":
                    urlDivision = "memorization";
                    break;
                case "Ten Qira'at":
                    urlDivision = "ten-qiraat";
                    break;
                // case "Best Voice":
                //     urlDivision = "best-voice";
                //     break;
                case "Islamic Studies":
                    urlDivision = "islamic-studies";
                    break;
                default:
                    NavManager.NavigateTo("/");
                    return;
            }

            // Create a copy of the form before modifying it
            var formDto = Mapper.Map<FormDto>(selectedForm);

            // If the selected form type doesn't match the form's original type,
            // clear out the Division, Category, and Portion
            if (selectedForm.CompetitionInfo.Division != SelectedFormType)
            {
                formDto.CompetitionInfo.Division = SelectedFormType;
                formDto.CompetitionInfo.Category = null;
                formDto.CompetitionInfo.Portion = null;
            }

            // Save the form to the service
            FormSelection.SelectForm(formDto);

            // Navigate to the appropriate page
            NavManager.NavigateTo($"/create/{urlDivision}/prev");

            // Close the modal
            CloseModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in SelectAndNavigate: {ex.Message}");
            // You can add more error handling here if needed
        }
    }
}

