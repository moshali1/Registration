@page "/"

@using RegistrationPortal.Components.Layout

@inject IUserData UserData
@inject IArchivedFormData ArchivedFormData
@inject IDatabaseArchivedFormData DatabaseArchivedFormData
@inject AuthenticationStateProvider AuthProvider

@attribute [Authorize]

<PageTitle>Home</PageTitle>

<div class="text-center">
    <h1 class="text-3xl mb-3 bg-gradient-to-r from-teal-600 to-sky-700 text-transparent bg-clip-text tracking-tight"><span class="font-bold" tabindex="-1">Welcome to the 11th Annual Imam Al-Shatibi Quran Competition (2025)</span> | Registration Portal</h1>

    <p class="text-base">Please review the rules and regulations on the main site <a href="https://imamshatibi.org" target="_blank" class="underline decoration-sky-500">imamshatibi.org</a> before registering. Thank you.</p>
</div>

<div class="px-1" role="alert">
    <h1 class="text-xl font-bold text-cyan-800">Returning Applicant?</h1>
    <p class="text-md">We've made it simpler for you to get started by prefilling your registration with your previous information. You now have access to your submitted forms from both <b>2023</b> and <b>2024</b>. Click the <b>Autofill</b> button on the Previous Forms card to select which year's data you'd like to use, or start with a <b>New Form</b> if you prefer.</p>
</div>

<ul role="list" class="py-2 list-none grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    <ArchivedFormsCard Forms2023="@archivedForms" Forms2024="@databaseArchivedForms" @rendermode="InteractiveServer" />
    <CountdownCard @rendermode="InteractiveServer" />
    <CurrentFormsCard UserId="@currentUser?.Id" @rendermode="InteractiveServer" />
</ul>

<ul role="list" class="py-2 list-none grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    <FaqCard @rendermode="InteractiveServer" />
    @* <InfoCard @rendermode="InteractiveServer" /> *@
</ul>

@code {
    private AuthenticationState authState;
    private User currentUser;
    private List<Form> archivedForms; // 2023
    private List<Form> databaseArchivedForms; // 2024

    protected async override Task OnInitializedAsync()
    {
        // Fetches the current authentication state and logs each claim for debugging purposes.
        authState = await AuthProvider.GetAuthenticationStateAsync();
        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        }

        // Loads user data based on the current authentication state and updates the user record if necessary.
        await LoadAndVerifyUser();

        // Retrieve archived forms for the user if their email is available.
        string email = GetClaimValue(authState, "email");
        if (email is not null)  
        {
            archivedForms = await ArchivedFormData.GetFormsAsync(email);
        }
        if (currentUser.Id is not null)
        {
            databaseArchivedForms = await DatabaseArchivedFormData.GetFormsAsync(currentUser.Id);
        }
    }

    private async Task LoadAndVerifyUser()
    {
        currentUser = await AuthProvider.GetUserFromAuth(UserData);
        
        string objectId = GetClaimValue(authState, "objectId");

        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            currentUser = await UserData.GetUserFromAuthentication(objectId) ?? new();

            string displayName = GetClaimValue(authState, "displayName");
            string email = GetClaimValue(authState, "email");
            string userType = GetClaimValue(authState, "userType");
            string role = GetClaimValue(authState, "role");

            bool isDirty = false;

            if (objectId.Equals(currentUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                currentUser.ObjectIdentifier = objectId;
            }
            if (displayName.Equals(currentUser.DisplayName) == false)
            {
                isDirty = true;
                currentUser.DisplayName = displayName;
            }
            if (email.Equals(currentUser.EmailAddress) == false)
            {
                isDirty = true;
                currentUser.EmailAddress = email;
            }
            if (userType?.Equals(currentUser.UserType) == false)
            {
                isDirty = true;
                currentUser.UserType = userType;
            }
            if (role?.Equals(currentUser.Role) == false)
            {
                isDirty = true;
                currentUser.Role = role;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(currentUser.Id))
                {
                    await UserData.CreateUser(currentUser);
                }
                else
                {
                    await UserData.UpdateUser(currentUser);
                }
            }
        }
    }

    private string GetClaimValue(AuthenticationState authState, string claimType)
    {
        string claimValue = null;

        switch (claimType)
        {
            case "objectId":
                claimValue = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
                break;
            case "displayName":
                claimValue = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
                break;
            case "email":
                claimValue = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("preferred_username"))?.Value;
                break;
            case "userType":
                claimValue = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("user_type"))?.Value;
                break;
            case "role":
                claimValue = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("roles"))?.Value;
                break;
            default:
                break;
        }

        return claimValue;
    }
}
