@page "/"
@using RegistrationPortal.Components.Layout
@inject AuthenticationStateProvider authProvider
@inject IUserData UserData
@inject IArchivedFormData ArchivedFormData

@attribute [Authorize]
<PageTitle>Home</PageTitle>

<div class="text-center">
    <h1 class="text-3xl mb-3 bg-gradient-to-r from-teal-600 to-sky-700 text-transparent bg-clip-text tracking-tight"><span class="font-bold" tabindex="-1">Welcome to the 10th Annual Imam Al-Shatibi Quran Competition (2024)</span> | Registration Portal</h1>

    <p class="text-base">Please review the rules and regulations on the main site <a href="https://imamshatibi.org" target="_blank" class="underline decoration-sky-500">imamshatibi.org</a> before registering. Thank you.</p>
</div>

<div class="px-1" role="alert">
    <h1 class="text-xl font-bold text-cyan-800">Returning from 2023?</h1>
    <p class="text-md">We've made it simpler for you to get started again by prefilling your registration form with last year's information. If you would like to use the submitted information from the same account, please choose the <b>autofill</b> option below. Otherwise, if you prefer to start fresh, select the <b>new form</b> option.</p>
</div>

<ul role="list" class="list-none grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    <ArchivedFormsCard ArchivedForms="archivedForms" @rendermode="InteractiveServer" />
    <CountdownCard @rendermode="InteractiveServer" />
    <CurrentFormsCard UserId="@userId" @rendermode="InteractiveServer" />
</ul>

@code {
    private User loggedInUser;

    private string userId = "";

    private List<Form> archivedForms;

    protected async override Task OnInitializedAsync()
    {
        await LoadAndVerifyUser();

        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;
        string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("preferred_username"))?.Value;

        if (email is not null)  
        {
            // NOT A PERMANENT SOLUTION - NEED A WAY TO CACHE OR AN EASIER RETRIEVAL
            archivedForms = await ArchivedFormData.GetFormsAsync(email);
        }

        userId = loggedInUser.Id;
    }

    private async Task LoadAndVerifyUser()
    {
        loggedInUser = await authProvider.GetUserFromAuth(UserData);

        var authState = await authProvider.GetAuthenticationStateAsync();
        string objectId = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("objectidentifier"))?.Value;

        foreach (var claim in authState.User.Claims)
        {
            Console.WriteLine($"Claim Type: {claim.Type}, Claim Value: {claim.Value}");
        }

        if (string.IsNullOrWhiteSpace(objectId) == false)
        {
            loggedInUser = await UserData.GetUserFromAuthentication(objectId) ?? new();

            string displayName = authState.User.Claims.FirstOrDefault(c => c.Type.Equals("name"))?.Value;
            string email = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("preferred_username"))?.Value;
            string userType = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("user_type"))?.Value;
            string role = authState.User.Claims.FirstOrDefault(c => c.Type.Contains("roles"))?.Value;

            bool isDirty = false;

            if (objectId.Equals(loggedInUser.ObjectIdentifier) == false)
            {
                isDirty = true;
                loggedInUser.ObjectIdentifier = objectId;
            }
            if (displayName.Equals(loggedInUser.DisplayName) == false)
            {
                isDirty = true;
                loggedInUser.DisplayName = displayName;
            }
            if (email.Equals(loggedInUser.EmailAddress) == false)
            {
                isDirty = true;
                loggedInUser.EmailAddress = email;
            }
            if (userType?.Equals(loggedInUser.UserType) == false)
            {
                isDirty = true;
                loggedInUser.UserType = userType;
            }
            if (role?.Equals(loggedInUser.Role) == false)
            {
                isDirty = true;
                loggedInUser.Role = role;
            }
            if (isDirty)
            {
                if (string.IsNullOrWhiteSpace(loggedInUser.Id))
                {
                    await UserData.CreateUser(loggedInUser);
                }
                else
                {
                    await UserData.UpdateUser(loggedInUser);
                }
            }
        }
    }
}
