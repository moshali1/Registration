@page "/message/{ID}"

@inject IFormData FormData
@inject ISchedulingService SchedulingService
@inject IUserData UserData
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager

@rendermode InteractiveServer

@attribute [Authorize]

<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-3xl">
        <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="bg-cyan-950 px-4 py-5 sm:px-6 flex items-center justify-between">
                <div>
                    <h1 class="text-base font-semibold leading-6 text-white">Message</h1>
                    <p class="text-sm text-white">View messages related to this form here. </p>
                </div>
                <button @onclick="GoToList" class="text-white bg-cyan-600 hover:bg-cyan-700 rounded-full p-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h13M3 14h9m-9 4h6M3 6h9" />
                    </svg>
                </button>
            </div>
            <div class="px-4 py-5 sm:p-6">
                @if (isLoading)
                {
                    <div class="flex justify-center items-center py-6">
                        <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-cyan-500"></div>
                    </div>
                }
                else if (form == null)
                {
                    <div class="text-center py-6">
                        <p>Form not found.</p>
                    </div>
                }
                else if (String.IsNullOrEmpty(form?.EventScheduleInfo.PrelimScheduledDate) == false)
                {
                    <div class="border rounded-xl bg-gray-50 p-6 space-y-5">
                        <div>
                            <h2 class="text-lg font-semibold text-cyan-900">
                                <i class="fas fa-calendar-check text-cyan-700 mr-2"></i>
                                Subject: Preliminary Competition Schedule Information
                            </h2>
                        </div>

                        <!-- Competitor Info Grid -->
                        <div>
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-gray-700">
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Name</span>
                                    <span class="text-base font-semibold">@form.PersonalInfo.GetFirstMiddleLastName()</span>
                                </div>
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Division</span>
                                    <span class="text-base font-semibold">@form.CompetitionInfo.Division</span>
                                </div>
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Category</span>
                                    <span class="text-base font-semibold">@form.CompetitionInfo.Category</span>
                                </div>
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Portion</span>
                                    <span class="text-base font-semibold">@form.CompetitionInfo.Portion</span>
                                </div>
                            </div>
                        </div>

                        <!-- Scheduled Info -->
                        <div class="text-gray-700 space-y-1">
                            <p>
                                <i class="fas fa-calendar-day text-gray-500 mr-1"></i>
                                <span class="font-semibold">Scheduled Date:</span> @form.EventScheduleInfo.PrelimScheduledDate
                            </p>
                            <p>
                                <i class="fas fa-clock text-gray-500 mr-1"></i>
                                <span class="font-semibold">Scheduled Time:</span> @form.EventScheduleInfo.PrelimScheduledTime Central Time (CT)
                            </p>
                            <p>
                                <i class="fas fa-laptop-house text-gray-500 mr-1"></i>
                                <span class="font-semibold">Format:</span> Virtual Livestream
                            </p>
                        </div>

                        <!-- Zoom Link Note -->
                        <div class="text-sm text-gray-600">
                            <p>
                                <i class="fas fa-link text-gray-500 mr-1"></i>
                                <span class="font-semibold">Zoom Link:</span>
                                @{
                                    var cat = form.CompetitionInfo.Category;
                                    string? zoomUrl = (cat == "1 Juz" || cat == "15 Juz")
                                    ? "https://us06web.zoom.us/j/84878509856"
                                    : (cat == "5 Juz" || cat == "10 Juz")
                                    ? "https://us06web.zoom.us/j/87910494755"
                                    : (cat == "20 Juz" || cat == "30 Juz")
                                    ? "https://us06web.zoom.us/j/84644766393"
                                    : null;
                                }
                                @if (!string.IsNullOrEmpty(zoomUrl))
                                {
                                    <a href="@zoomUrl"
                                       target="_blank"
                                       class="ml-2 underline text-blue-600 hover:text-blue-800 text-xs">
                                        @zoomUrl
                                    </a>
                                }
                                else
                                {
                                    <button class="ml-2 cursor-not-allowed bg-gray-200 text-gray-500 px-3 py-1 rounded text-xs" disabled>
                                        Link coming soon
                                    </button>
                                }
                            </p>
                        </div>


                        <!-- Instructions -->
                        <div>
                            <h3 class="text-base font-semibold text-gray-800 mb-2">
                                <i class="fas fa-info-circle text-gray-500 mr-1"></i>Competition Instructions:
                            </h3>
                            <ul class="list-disc pl-6 text-sm text-gray-700 space-y-1">
                                <li>Join the Zoom Conference at least 30 minutes before your scheduled time.</li>
                                <li>Wear appropriate clothing and ensure your face is clearly visible with good lighting.</li>
                                <li>Join from a private, quiet room; a virtual inspection will confirm compliance.</li>
                                <li>You will first be placed in a waiting room. As your scheduled time approaches, you will be given a link to join the livestream session.</li>
                            </ul>
                            <p class="mt-2 text-sm text-gray-600">Further instructions will be provided upon joining the Zoom meeting.</p>
                        </div>
                        

                        <!-- Error Message for Cancellation -->
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="bg-red-50 border border-red-200 rounded-lg p-4">
                                <div class="flex">
                                    <div class="flex-shrink-0">
                                        <i class="fas fa-exclamation-circle text-red-500"></i>
                                    </div>
                                    <div class="ml-3">
                                        <h3 class="text-sm font-medium text-red-800">Error</h3>
                                        <p class="text-sm text-red-700 mt-1">@errorMessage</p>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (canReschedule)
                        {
                            <!-- Single button that opens modal -->
                            <div class="pt-4">
                                <button @onclick="ShowChangeScheduleModal" class="inline-block bg-cyan-600 hover:bg-cyan-700 text-white py-2 px-5 rounded-full font-medium transition">
                                    <i class="fas fa-edit mr-2"></i>Change My Schedule
                                </button>
                            </div>
                        }
                        
                    </div>
                }
                else
                {
                    <div class="border rounded-xl bg-gray-50 p-6 space-y-5">
                        <div>
                            <h2 class="text-lg font-semibold text-cyan-900">
                                <i class="fas fa-calendar-alt text-cyan-700 mr-2"></i>
                                Subject: Preliminary Round Scheduling
                            </h2>
                        </div>

                        <div>
                            <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 text-gray-700">
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Name</span>
                                    <span class="text-base font-semibold">@form.PersonalInfo.GetFirstMiddleLastName()</span>
                                </div>
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Division</span>
                                    <span class="text-base font-semibold">@form.CompetitionInfo.Division</span>
                                </div>
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Category</span>
                                    <span class="text-base font-semibold">@form.CompetitionInfo.Category</span>
                                </div>
                                <div>
                                    <span class="block text-sm font-medium text-gray-500">Portion</span>
                                    <span class="text-base font-semibold">@form.CompetitionInfo.Portion</span>
                                </div>
                            </div>
                        </div>

                        <div>
                            <p class="text-base text-gray-700">
                                <span class="font-semibold">Welcome to the 11th Annual Imam Al-Shatibi Qur'an Competition!</span>
                                We're excited to have you join us. Your next step is to schedule your preliminary round.
                            </p>
                        </div>
                        @if (false)
                        {
                            <div>
                                <p class="text-sm text-gray-600 italic">
                                    <i class="fas fa-exclamation-circle text-yellow-500 mr-1"></i>
                                    If you do not schedule your time by
                                    <span class="font-semibold text-gray-800">Tuesday, May 13 at 11:59 PM</span>,
                                    we will randomly schedule you on one of the remaining available times.
                                </p>
                                <p class="mt-1 text-xs text-gray-500 italic">
                                    While we will try our best to schedule you at your chosen time, due to logistics and the pace of other participants, this cannot be guaranteed.
                                </p>
                            </div>  
                        }
                        

                        <div>
                            <p class="mb-2 text-base text-gray-700">Please click the button below to choose your preferred date and time:</p>
                            <a href="/schedule/@form.Id"
                               class="inline-block bg-cyan-600 hover:bg-cyan-700 text-white font-semibold py-2 px-5 rounded-full transition">
                                <i class="fas fa-clock mr-2"></i>Schedule Preliminary Round
                            </a>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<!-- Change Schedule Modal -->
@if (showChangeScheduleModal)
{
    <div class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 overflow-hidden">
            <div class="bg-cyan-950 px-4 py-3 text-white">
                <h3 class="text-lg font-medium">Change Schedule</h3>
            </div>
            <div class="p-5">
                <p class="text-gray-700 mb-4">
                    Changing your schedule requires cancelling your current time slot first.
                    You will then be redirected to select a new time.
                </p>
                <p class="text-yellow-600 bg-yellow-50 p-3 rounded-lg text-sm mb-4">
                    <i class="fas fa-exclamation-circle mr-2"></i>
                    <strong>Important:</strong> Your current time slot will be immediately cancelled.
                    Available slots may be limited, so be prepared to select a new time.
                </p>

                @if (isCancelling)
                {
                    <div class="flex justify-center mb-4">
                        <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-cyan-500"></div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-50 border border-red-200 rounded-lg p-3 mb-4">
                        <p class="text-sm text-red-700">@errorMessage</p>
                    </div>
                }

                <div class="flex justify-end space-x-3">
                    <button @onclick="CloseModal"
                            class="px-4 py-2 bg-gray-200 hover:bg-gray-300 rounded-md text-gray-700">
                        Cancel
                    </button>
                    <button @onclick="ProcessChangeSchedule"
                            disabled="@isCancelling"
                            class="px-4 py-2 bg-cyan-600 hover:bg-cyan-700 rounded-md text-white">
                        Proceed to Change
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string ID { get; set; }

    private Form form;
    private ScheduleSettings scheduleSettings;
    private bool canReschedule = false;
    private bool canSchedule = false;
    private User currentUser;
    private bool isLoading = true;
    private bool IsAdmin = false;
    private bool hasSchedule = false;
    private string errorMessage;
    private bool isCancelling = false;
    private bool showChangeScheduleModal = false;


    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            if (ID is not null)
            {
                form = await FormData.GetForm(ID);
                if (form == null)
                {
                    return;
                }

                currentUser = await AuthState.GetUserFromAuth(UserData);

                var authState = await AuthState.GetAuthenticationStateAsync();
                var user = authState.User;
                IsAdmin = user.IsInRole("Admin");

                scheduleSettings = await SchedulingService.GetScheduleSettingsAsync();


                // Future BUG Fix
                // Currently Pre Scheduling Deadlinea and Post have different criteria
                // Pre Scheduling Deadline - users should be able to reschedule if they wish to as long as schedling is enabled
                // Post deadline - users who already scheduled should not be able to reschedule, it should also be open to verified users who 
                // did not check their prelim schedule (false) until we manually remove scheudling option//
                // scheduling settings logic is currently set only for those who did not schedule yet (reschelding)

                if (IsAdmin)
                {
                    canReschedule = true;
                }
                else if (scheduleSettings == null || !scheduleSettings.IsSchedulingEnabled)
                {
                    // no settings or explicitly disabled → no rescheduling
                    canReschedule = false;
                }
                else
                {
                    var now = DateTime.UtcNow;
                    var start = scheduleSettings.SchedulingStartDate;
                    var end = scheduleSettings.SchedulingEndDate;

                    if (now < start || now > end)
                    {
                        canReschedule = false;
                        errorMessage =
                            $"Scheduling is not available. Please check back between " +
                            $"{start:MM/dd/yyyy} and {end:MM/dd/yyyy}.";
                    }
                    else
                    {
                        canReschedule = true;
                    }
                }

                // TEMP CODE
                // This is a temporary fix to prevent access to the message page for non-memorization divisions
                if (form.CompetitionInfo.Division != "Memorization")
                {
                    NavManager.NavigateTo("/", forceLoad: true);
                }

                // TEMP CODE
                // Hard Disable - Morning of Competition
                if (String.IsNullOrWhiteSpace(form.EventScheduleInfo.PrelimScheduledDate))
                {
                    NavManager.NavigateTo("/", forceLoad: true);
                }

                // Check if user has scheduled prelim round
                hasSchedule = await SchedulingService.IsPrelimScheduleSelectedAsync(ID);

                if (form.EventScheduleInfo.CheckedPrelimSchedule == false &&
                    !string.IsNullOrEmpty(form.EventScheduleInfo.PrelimScheduledDate) &&
                    IsAdmin == false)
                {
                    // Mark prelim schedule as read
                    form.EventScheduleInfo.CheckedPrelimSchedule = true;
                    UpdateTrackingInfoForPrelim(form);
                    await FormData.UpdateForm(form);
                }
            }
        }
        catch (Exception)
        {
            // Handle exceptions as needed
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task MarkAsRead()
    {
        if (form != null && !form.EventScheduleInfo.CheckedPrelimSchedule)
        {
            // Mark prelim schedule as read
            form.EventScheduleInfo.CheckedPrelimSchedule = true;

            // Add tracking info
            UpdateTrackingInfoForPrelim(form);

            await FormData.UpdateForm(form);

            // Refresh the form
            form = await FormData.GetForm(ID);
        }
    }

    private void UpdateTrackingInfoForPrelim(Form form)
    {
        // Update Tracking Info
        Tracking tracking = new();
        tracking.PerformedById = currentUser.Id;
        tracking.FullName = currentUser.GetFullName();
        tracking.DisplayName = currentUser.DisplayName;
        tracking.UserType = currentUser.UserType;
        tracking.TrackingAction = $"Read Message: Preliminary Round Schedule";

        var description = $"Message regarding preliminary round schedule (date and time) was marked as read by {currentUser.DisplayName} ({currentUser.UserType}).";
        tracking.Descriptions.Add(description);

        form.FormHistory.Add(tracking);
    }

    private void GoToList()
    {
        if (!IsAdmin)
        {
            NavManager.NavigateTo("/list");
        }
        else
        {
            NavManager.NavigateTo("/list2");
        }
    }

    private void ChangeSchedule()
    {
        NavManager.NavigateTo($"/schedule/{ID}");
    }

    private async Task CancelSchedule()
    {
        errorMessage = null;
        isCancelling = true;

        try
        {
            var result = await SchedulingService.CancelReservationAsync(ID);

            if (result)
            {
                // Add tracking info
                await AddScheduleTrackingInfo("Schedule Cancelled", "User cancelled their preliminary round time slot.");

                // Clear cache and reload the form to show updated state
                FormData.ClearCache();
                form = await FormData.GetForm(ID);
            }
            else
            {
                errorMessage = "Failed to cancel schedule. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error cancelling schedule: {ex.Message}";
        }
        finally
        {
            isCancelling = false;
        }
    }

    private async Task AddScheduleTrackingInfo(string action, string description)
    {
        try
        {
            // Get the latest form data
            var formData = await FormData.GetForm(ID);
            if (formData == null) return;

            // Create tracking entry
            var tracking = new Tracking
            {
                PerformedById = currentUser.Id,
                FullName = currentUser.GetFullName(),
                DisplayName = currentUser.DisplayName,
                UserType = currentUser.UserType,
                TrackingAction = $"Preliminary Round {action}",
                ActionDateTime = DateTime.UtcNow
            };

            // Add details to the description
            tracking.Descriptions.Add(description);

            if (action == "Schedule Cancelled")
            {
                tracking.Descriptions.Add($"Cancelled date: {formData.EventScheduleInfo.PrelimScheduledDate}");
                tracking.Descriptions.Add($"Cancelled time: {formData.EventScheduleInfo.PrelimScheduledTime}");
            }

            // Add the tracking to the form history
            formData.FormHistory.Add(tracking);

            // Save the updated form
            await FormData.UpdateForm(formData);
        }
        catch (Exception ex)
        {
            // Log the error but don't disrupt the user flow
            Console.WriteLine($"Error adding tracking info: {ex.Message}");
        }
    }

    private string FormatTime(string timeString)
    {
        if (DateTime.TryParse(timeString, out DateTime time))
        {
            return time.ToString("h:mm tt"); // Formats as "10:00 AM"
        }

        // If it's already just a time string like "10:00:00"
        if (timeString != null && timeString.Length >= 5)
        {
            // Try to remove seconds portion if it exists
            int colonCount = timeString.Count(c => c == ':');
            if (colonCount == 2)
            {
                // Has seconds - return just hh:mm
                return timeString.Substring(0, timeString.LastIndexOf(':'));
            }
        }

        return timeString;
    }


    private void ShowChangeScheduleModal()
    {
        showChangeScheduleModal = true;
        errorMessage = null;
    }

    private void CloseModal()
    {
        showChangeScheduleModal = false;
        errorMessage = null;
    }

    private async Task ProcessChangeSchedule()
    {
        errorMessage = null;
        isCancelling = true;

        try
        {
            var result = await SchedulingService.CancelReservationAsync(ID);

            if (result)
            {
                // Add tracking info
                await AddScheduleTrackingInfo("Schedule Cancelled", "User cancelled their schedule to select a new time slot.");

                // Clear cache to ensure fresh data
                FormData.ClearCache();

                // Navigate to schedule page
                NavManager.NavigateTo($"/schedule/{ID}");
            }
            else
            {
                errorMessage = "Failed to cancel current schedule. Please try again.";
                isCancelling = false;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            isCancelling = false;
        }
    }
}