@page "/admin/phone-search"
@using RegistrationPortal.Data.DataAccess
@using RegistrationPortal.Data.Models
@inject IFormData FormData
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<PageTitle>Search Forms by Phone Number</PageTitle>

<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-6">
    <div class="sm:flex sm:items-center mb-6">
        <div class="sm:flex-auto">
            <h1 class="text-2xl font-bold mb-3" tabindex="-1">Search Forms by Phone Number</h1>
            <p class="mt-2 text-gray-700">
                Find all forms associated with a specific phone number (parent, teacher, or competitor).
            </p>
        </div>
    </div>

    @if (isInitialLoading)
    {
        <div class="w-full h-2 bg-gray-200 rounded-full overflow-hidden mb-6">
            <div class="h-full bg-cyan-600 rounded-full animate-loading-bar"></div>
        </div>
        <div class="text-center py-8">
            <p class="text-gray-600">Loading all forms, please wait...</p>
        </div>
    }
    else
    {
        <div class="bg-white shadow overflow-hidden sm:rounded-lg mb-6">
            <div class="px-4 py-5 sm:px-6 bg-gray-50">
                <h3 class="text-lg leading-6 font-medium text-gray-900">Search Criteria</h3>
            </div>
            <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
                <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                    <div class="sm:col-span-3">
                        <label for="division" class="block text-sm font-medium text-gray-700">Division</label>
                        <select id="division" @bind="selectedDivision" class="mt-1 block w-full rounded-md border-gray-300 py-2 pl-3 pr-10 text-base focus:border-cyan-500 focus:outline-none focus:ring-cyan-500 sm:text-sm">
                            <option value="All">All Divisions</option>
                            <option value="Memorization">Memorization</option>
                            <option value="Ten Qira'at">Ten Qira'at</option>
                            <option value="Islamic Studies">Islamic Studies</option>
                        </select>
                    </div>
                    <div class="sm:col-span-3">
                        <label for="phone-number" class="block text-sm font-medium text-gray-700">Phone Number</label>
                        <div class="mt-1 flex rounded-md shadow-sm">
                            <input type="text"
                                   name="phone-number"
                                   id="phone-number"
                                   @bind="phoneNumber"
                                   @onkeyup="HandleKeyPress"
                                   placeholder="(555) 555-5555"
                                   class="block w-full rounded-md border-gray-300 shadow-sm focus:border-cyan-500 focus:ring-cyan-500 sm:text-sm" />
                        </div>
                        <p class="mt-1 text-xs text-gray-500">
                            Enter numbers only. Format doesn't matter (e.g., 5551234567 or 555-123-4567).
                        </p>
                    </div>
                </div>
                <div class="mt-4 flex justify-end">
                    <button @onclick="SearchForms"
                            class="inline-flex items-center rounded-md border border-transparent bg-cyan-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-cyan-700 focus:outline-none">
                        @if (isSearching)
                        {
                            <span class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></span>
                            <span>Searching...</span>
                        }
                        else
                        {
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                            <span>Search</span>
                        }
                    </button>
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="rounded-md bg-red-50 p-4 mb-6">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <h3 class="text-sm font-medium text-red-800">@errorMessage</h3>
                    </div>
                </div>
            </div>
        }

        @if (searchPerformed)
        {
            <div class="bg-white shadow overflow-hidden sm:rounded-lg mb-6">
                <div class="px-4 py-5 sm:px-6 bg-gray-50 flex justify-between items-center">
                    <h3 class="text-lg leading-6 font-medium text-gray-900">Search Results</h3>
                    <span class="text-sm text-gray-500">@searchResultForms.Count form(s) found</span>
                </div>

                @if (searchResultForms.Count > 0)
                {
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">DOB</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Division</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Portion</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Match Type</th>
                                    <th scope="col" class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach (var (form, matchType) in searchResultForms)
                                {
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@form.PersonalInfo.GetFullName()</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@form.PersonalInfo.DOB.ToString("MM/dd/yyyy")</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@form.CompetitionInfo.Division</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@form.CompetitionInfo.Category</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@form.CompetitionInfo.Portion</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="@GetStatusClass(form.StatusInfo.Status) px-2 py-1 rounded-full text-xs">
                                                @form.StatusInfo.Status
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                            <span class="@GetMatchTypeClass(matchType) px-2 py-1 rounded-full text-xs">
                                                @matchType
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-right">
                                            <a href="/details/@form.Id" target="_blank" class="text-cyan-600 hover:text-cyan-900 mr-3">View Details</a>
                                            <a href="/list2/@Uri.EscapeDataString(form.PersonalInfo.GetFullName())" target="_blank" class="text-purple-600 hover:text-purple-900">View in List</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="px-4 py-5 sm:p-6 text-center">
                        <p class="text-gray-500">No forms found matching the search criteria.</p>
                    </div>
                }
            </div>
        }
    }
</div>


@code {
    private string selectedDivision = "All";
    private string phoneNumber = "";
    private bool isSearching = false;
    private bool isInitialLoading = true;
    private bool searchPerformed = false;
    private string errorMessage = "";
    private List<Form> allForms = new List<Form>();
    private List<(Form Form, string MatchType)> searchResultForms = new List<(Form, string)>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load all forms during initialization
            allForms = await FormData.GetForms();
            isInitialLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading forms: {ex.Message}";
            isInitialLoading = false;
        }
    }

    private async Task SearchForms()
    {
        if (string.IsNullOrWhiteSpace(phoneNumber))
        {
            errorMessage = "Please enter a phone number to search.";
            return;
        }

        try
        {
            isSearching = true;
            errorMessage = "";
            searchPerformed = true;
            searchResultForms.Clear();

            // Clean the phone number - remove all non-digit characters
            string cleanedPhoneNumber = new string(phoneNumber.Where(char.IsDigit).ToArray());

            // Make sure we have at least 10 digits (US phone numbers)
            if (cleanedPhoneNumber.Length < 10)
            {
                errorMessage = "Please enter at least 10 digits for the phone number.";
                isSearching = false;
                return;
            }

            // Filter forms by division if not "All"
            var filteredForms = allForms;
            if (selectedDivision != "All")
            {
                filteredForms = allForms.Where(f => f.CompetitionInfo.Division == selectedDivision).ToList();
            }

            // Search for forms with matching phone numbers
            foreach (var form in filteredForms)
            {
                // Check competitor phone
                string competitorPhone = new string(form.PersonalInfo.PhoneNumber?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());

                // Check parent phone
                string parentPhone = new string(form.ParentInfo.ParentPhoneNumber?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());

                // Check teacher phone
                string teacherPhone = new string(form.TeacherInfo.TeacherPhoneNumber?.Where(char.IsDigit).ToArray() ?? Array.Empty<char>());

                // Match the phone number against all three phone fields
                if (!string.IsNullOrEmpty(competitorPhone) && competitorPhone.Contains(cleanedPhoneNumber))
                {
                    searchResultForms.Add((form, "Competitor"));
                }
                else if (!string.IsNullOrEmpty(parentPhone) && parentPhone.Contains(cleanedPhoneNumber))
                {
                    searchResultForms.Add((form, "Parent"));
                }
                else if (!string.IsNullOrEmpty(teacherPhone) && teacherPhone.Contains(cleanedPhoneNumber))
                {
                    searchResultForms.Add((form, "Teacher"));
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error searching forms: {ex.Message}";
        }
        finally
        {
            isSearching = false;
        }
    }

    private void HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SearchForms();
        }
    }

    private string GetStatusClass(string status)
    {
        return status switch
        {
            "Verified" => "bg-green-100 text-green-800",
            "Reviewed" => "bg-blue-100 text-blue-800",
            "Awaiting Review" => "bg-amber-100 text-amber-800",
            "Pending" => "bg-gray-100 text-gray-800",
            "Withdrawn" => "bg-red-100 text-red-800",
            "Disqualified" => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetMatchTypeClass(string matchType)
    {
        return matchType switch
        {
            "Competitor" => "bg-purple-100 text-purple-800",
            "Parent" => "bg-blue-100 text-blue-800",
            "Teacher" => "bg-cyan-100 text-cyan-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }
}