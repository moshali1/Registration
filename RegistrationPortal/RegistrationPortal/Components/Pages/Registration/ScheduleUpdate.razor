@page "/schedule-update/{ID}"

@inject IFormData FormData
@inject IUserData UserData
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthState
@inject NavigationManager NavManager

@rendermode InteractiveServer

@attribute [Authorize(Roles = "Admin")]

<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
    <div class="mx-auto max-w-3xl">
        <div class="overflow-hidden rounded-lg bg-white shadow">
            <div class="bg-cyan-950 px-4 py-5 sm:px-6">
                <h1 class="text-base font-semibold leading-6 text-white">Edit Schedule</h1>
                <p class="text-sm text-white">Modify the scheduled date and time for the final round. </p>
            </div>
            <div class="px-4 py-5 sm:p-6">
                @if (form != null)
                {
                    <div class="mb-4">
                        <label for="scheduledDate" class="block text-sm font-medium text-gray-700">Scheduled Date</label>
                        <input type="text" id="scheduledDate" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-cyan-500 focus:ring-cyan-500 sm:text-sm" @bind="form.EventScheduleInfo.FinalScheduledDate">
                    </div>
                    <div class="mb-4">
                        <label for="scheduledTime" class="block text-sm font-medium text-gray-700">Scheduled Time</label>
                        <input type="text" id="scheduledTime" class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-cyan-500 focus:ring-cyan-500 sm:text-sm" @bind="form.EventScheduleInfo.FinalScheduledTime">
                    </div>
                    <div class="mb-4">
                        <button @onclick="SaveSchedule" class="inline-block bg-cyan-600 hover:bg-cyan-700 text-white font-semibold py-2 px-4 rounded">
                            Save Schedule
                        </button>
                    </div>
                }
                else
                {
                    <p><em>Loading...</em></p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string ID { get; set; }

    private Form form;
    private User currentUser;

    private string initialDate;
    private string initialTime;

    protected override async Task OnInitializedAsync()
    {
        if (ID is not null)
        {
            form = await FormData.GetForm(ID);
            currentUser = await AuthState.GetUserFromAuth(UserData);

            initialDate = form.EventScheduleInfo.FinalScheduledDate;
            initialTime = form.EventScheduleInfo.FinalScheduledTime;
        }
    }

    private async Task SaveSchedule()
    {
        if (form.EventScheduleInfo != null)
        {
            form.EventScheduleInfo.CheckedFinalSchedule = false;
            UpdateTrackingInfo(form, "Edited Final Round Schedule");

            await FormData.UpdateForm(form);

            FormData.ClearCache();

            // Optionally, navigate to another page or show a success message
            NavManager.NavigateTo($"/message/{ID}");
        }
    }

    private void UpdateTrackingInfo(Form form, string action)
    {
        Tracking tracking = new()
            {
                PerformedById = currentUser.Id,
                FullName = currentUser.GetFullName(),
                DisplayName = currentUser.DisplayName,
                UserType = currentUser.UserType,
                TrackingAction = action
            };

        var description = $"Scheduled date and time were edited by {currentUser.DisplayName} ({currentUser.UserType}).";
        var description2 = $"Scheduled date changed from ({initialDate}) to ({form.EventScheduleInfo.FinalScheduledDate}).";
        var description3 = $"Scheduled time changed from ({initialTime}) to ({form.EventScheduleInfo.FinalScheduledTime}).";
        tracking.Descriptions.Add(description);
        tracking.Descriptions.Add(description2);
        tracking.Descriptions.Add(description3);

        form.FormHistory.Add(tracking);
    }
}